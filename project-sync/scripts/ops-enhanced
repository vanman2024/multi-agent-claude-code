#!/bin/bash
# Enhanced operations CLI with CLI-first testing support
# Includes MCP, CLI contract tests, and smart detection

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
CONFIG_FILE="$REPO_ROOT/.automation/config.yml"
BACKEND_TESTS="$REPO_ROOT/testing/backend-tests"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() { echo -e "${BLUE}[OPS]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Ensure we're in repo root
cd "$REPO_ROOT"

# Detect available testing tools
detect_test_tools() {
    local tools=""
    
    # Check for Python test runners
    if command -v uv >/dev/null 2>&1; then
        tools="$tools uv"
    fi
    
    if command -v pytest >/dev/null 2>&1; then
        tools="$tools pytest"
    fi
    
    # Check for FastMCP
    if python3 -c "import fastmcp" 2>/dev/null; then
        tools="$tools fastmcp"
    fi
    
    # Check for Node/npm
    if command -v npm >/dev/null 2>&1 && [[ -f "package.json" ]]; then
        tools="$tools npm"
    fi
    
    echo "$tools"
}

# Activate virtual environment if exists
activate_venv() {
    if [[ -f ".venv/bin/activate" ]]; then
        source .venv/bin/activate
    elif [[ -f "venv/bin/activate" ]]; then
        source venv/bin/activate
    fi
}

# Run pytest with proper command
run_pytest() {
    local args="$@"
    activate_venv
    
    # Try uv first, fall back to pytest
    if command -v uv >/dev/null 2>&1; then
        uv run pytest $args
    elif command -v pytest >/dev/null 2>&1; then
        pytest $args
    elif command -v python3 >/dev/null 2>&1; then
        python3 -m pytest $args
    else
        print_error "No pytest runner found"
        return 1
    fi
}

# Enhanced QA command with CLI-first testing
cmd_qa() {
    local test_type="${1:-all}"
    local verbose="${2:-}"
    
    print_status "Running quality assurance checks ($test_type)"
    
    # Detect available tools
    local tools=$(detect_test_tools)
    print_status "Available tools:$tools"
    
    case "$test_type" in
        --backend|backend)
            qa_backend "$verbose"
            ;;
        --frontend|frontend)
            qa_frontend "$verbose"
            ;;
        --cli|cli)
            qa_cli "$verbose"
            ;;
        --mcp|mcp)
            qa_mcp "$verbose"
            ;;
        --all|all|"")
            qa_all "$verbose"
            ;;
        --help|help)
            qa_help
            ;;
        *)
            print_error "Unknown test type: $test_type"
            qa_help
            return 1
            ;;
    esac
}

qa_backend() {
    local verbose="$1"
    print_status "Running backend QA checks"
    activate_venv
    
    # Linting
    if command -v ruff >/dev/null 2>&1; then
        echo "🧹 Linting with ruff..."
        ruff check src/ --fix || true
    fi
    
    # Formatting
    if command -v black >/dev/null 2>&1; then
        echo "🎨 Formatting with black..."
        black src/ || true
    fi
    
    # Type checking
    if command -v mypy >/dev/null 2>&1; then
        echo "🔍 Type checking with mypy..."
        mypy src/ || true
    fi
    
    # Backend tests
    if [[ -d "$BACKEND_TESTS" ]]; then
        echo "🧪 Running backend tests..."
        cd "$BACKEND_TESTS"
        
        # Fast lane by default (exclude slow and subprocess tests)
        local pytest_args="-m 'not slow and not client_process'"
        
        # Include MCP tests if fastmcp is available
        if python3 -c "import fastmcp" 2>/dev/null; then
            print_status "Including MCP tests (fastmcp found)"
            pytest_args="$pytest_args or mcp"
        fi
        
        [[ -n "$verbose" ]] && pytest_args="$pytest_args -v"
        
        run_pytest $pytest_args || true
        cd "$REPO_ROOT"
    fi
    
    print_success "Backend QA complete"
}

qa_frontend() {
    local verbose="$1"
    print_status "Running frontend QA checks"
    
    if [[ -f "package.json" ]] && command -v npm >/dev/null 2>&1; then
        # Check for frontend test scripts
        if npm run | grep -q "test:frontend"; then
            echo "🎭 Running frontend tests..."
            npm run test:frontend || true
        fi
        
        if npm run | grep -q "lint:frontend"; then
            echo "🧹 Linting frontend..."
            npm run lint:frontend || true
        fi
    else
        print_warning "No frontend tests found (skipping)"
    fi
    
    print_success "Frontend QA complete"
}

qa_cli() {
    local verbose="$1"
    print_status "Running CLI contract tests"
    
    if [[ -d "$BACKEND_TESTS/cli" ]]; then
        cd "$BACKEND_TESTS"
        local pytest_args="cli/ -m cli"
        [[ -n "$verbose" ]] && pytest_args="$pytest_args -v"
        
        run_pytest $pytest_args || true
        cd "$REPO_ROOT"
    else
        print_warning "No CLI tests found at $BACKEND_TESTS/cli"
    fi
    
    print_success "CLI testing complete"
}

qa_mcp() {
    local verbose="$1"
    print_status "Running MCP server tests"
    
    # Check if fastmcp is available
    if ! python3 -c "import fastmcp" 2>/dev/null; then
        print_warning "FastMCP not installed - installing..."
        pip install fastmcp || {
            print_warning "Could not install fastmcp, skipping MCP tests"
            return 0
        }
    fi
    
    if [[ -d "$BACKEND_TESTS/mcp" ]]; then
        cd "$BACKEND_TESTS"
        
        # Run MCP tests, excluding subprocess tests by default
        local pytest_args="mcp/ -m 'mcp and not client_process'"
        
        # Check if transport tests are requested
        if [[ -n "$RUN_MCP_TRANSPORT" ]]; then
            print_status "Including MCP transport tests (RUN_MCP_TRANSPORT=1)"
            pytest_args="mcp/ -m mcp"
        fi
        
        [[ -n "$verbose" ]] && pytest_args="$pytest_args -v"
        
        run_pytest $pytest_args || true
        cd "$REPO_ROOT"
    else
        print_warning "No MCP tests found at $BACKEND_TESTS/mcp"
    fi
    
    print_success "MCP testing complete"
}

qa_all() {
    local verbose="$1"
    print_status "Running all QA checks"
    
    # Run each test suite
    qa_backend "$verbose"
    echo ""
    qa_cli "$verbose"
    echo ""
    qa_mcp "$verbose"
    echo ""
    qa_frontend "$verbose"
    
    print_success "All QA checks complete"
}

qa_help() {
    cat << EOF
Usage: ops qa [TYPE] [OPTIONS]

Test Types:
  --backend    Backend tests (Python, API)
  --frontend   Frontend tests (if exists)
  --cli        CLI contract tests
  --mcp        MCP server tests
  --all        All tests (default)

Options:
  -v, --verbose    Verbose output

Environment Variables:
  RUN_MCP_TRANSPORT=1    Enable subprocess/transport MCP tests
  RUN_LIVE=1             Enable live integration tests
  RUN_SLOW=1             Enable slow tests

Examples:
  ops qa                       # Run all fast tests
  ops qa --backend            # Backend only
  ops qa --cli -v             # CLI tests with verbose
  ops qa --mcp                # MCP tests only
  RUN_MCP_TRANSPORT=1 ops qa --mcp  # Include transport tests

Fast Lane (default):
  - Excludes: slow tests, subprocess tests
  - Includes: unit, smoke, contract, mcp (if available)
  - Runtime: <60 seconds
EOF
}

# Detect project type
cmd_detect() {
    print_status "Detecting project configuration..."
    
    echo "📁 Project Structure:"
    [[ -f "pyproject.toml" ]] && echo "  ✓ Python project (pyproject.toml)"
    [[ -f "requirements.txt" ]] && echo "  ✓ Python dependencies (requirements.txt)"
    [[ -f "package.json" ]] && echo "  ✓ Node.js project (package.json)"
    [[ -d "src" ]] && echo "  ✓ Source directory (src/)"
    [[ -d "public" ]] && echo "  ✓ Frontend assets (public/)"
    [[ -d ".claude" ]] && echo "  ✓ Claude configuration (.claude/)"
    [[ -f ".claude/mcp-servers.json" ]] && echo "  ✓ MCP servers configured"
    
    echo ""
    echo "🧪 Testing Infrastructure:"
    [[ -d "$BACKEND_TESTS" ]] && echo "  ✓ Backend tests ($BACKEND_TESTS)"
    [[ -d "$BACKEND_TESTS/cli" ]] && echo "  ✓ CLI tests"
    [[ -d "$BACKEND_TESTS/mcp" ]] && echo "  ✓ MCP tests"
    [[ -d "frontend-tests" ]] && echo "  ✓ Frontend tests"
    
    echo ""
    echo "🔧 Available Tools:"
    local tools=$(detect_test_tools)
    for tool in $tools; do
        echo "  ✓ $tool"
    done
    
    # Determine project type
    local project_type="unknown"
    if [[ -f "package.json" ]] && [[ -d "public" || -d "src/pages" ]]; then
        project_type="fullstack"
    elif [[ -f "pyproject.toml" ]] && [[ ! -d "public" ]]; then
        project_type="backend-only"
    elif [[ -f "package.json" ]] && [[ ! -d "public" ]]; then
        project_type="cli-tool"
    fi
    
    echo ""
    print_success "Project type: $project_type"
}

# Main command handler
main() {
    local cmd="${1:-help}"
    shift || true
    
    case "$cmd" in
        qa)
            cmd_qa "$@"
            ;;
        detect|detect-type)
            cmd_detect
            ;;
        help|--help)
            cat << EOF
Enhanced Ops CLI - CLI-First Testing Support

Commands:
  qa [TYPE]       Run quality assurance checks
  detect          Detect project configuration
  help            Show this help

See 'ops qa --help' for testing options

Environment:
  RUN_MCP_TRANSPORT=1    Enable transport tests
  RUN_LIVE=1             Enable live tests
  RUN_SLOW=1             Enable slow tests
EOF
            ;;
        *)
            print_error "Unknown command: $cmd"
            main help
            return 1
            ;;
    esac
}

# Run main
main "$@"