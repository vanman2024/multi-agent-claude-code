name: Set Working State

on:
  workflow_dispatch:
    inputs:
      state:
        description: "Select working state"
        required: true
        type: choice
        options:
          - STABLE
          - WORKING
          - WIP
          - HOTFIX
        default: WORKING
      pr:
        description: "PR number (optional, auto-detected if omitted)"
        required: false
        type: string
      ref:
        description: "Ref/sha to mark (optional; defaults to head of PR or current sha)"
        required: false
        type: string
      tag:
        description: "Also create/move floating tag (state-<state>-<pr|branch>)"
        required: false
        default: false
        type: boolean

jobs:
  set-state:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      statuses: write
      checks: write
      issues: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve context (PR, SHA, branch)
        id: ctx
        uses: actions/github-script@v7
        with:
          script: |
            const inputPr = core.getInput('pr');
            const inputRef = core.getInput('ref');
            const state = core.getInput('state');
            let prNumber = inputPr ? Number(inputPr) : undefined;
            let sha = inputRef || undefined;
            let branch = undefined;

            // If PR number not provided, try to find one for current ref/sha
            if (!prNumber) {
              // Try to find an open PR from this workflow run's branch
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: undefined
              });
              // Prefer PRs whose head sha matches current sha
              const currentSha = context.sha;
              const match = prs.find(p => p.head && (p.head.sha === currentSha || p.head.ref === context.ref.replace('refs/heads/','')));
              if (match) {
                prNumber = match.number;
                if (!sha) sha = match.head.sha;
                branch = match.head.ref;
              }
            }

            if (!sha) sha = context.sha;
            if (!branch) {
              try {
                const ref = context.ref.replace('refs/heads/','');
                branch = ref;
              } catch {}
            }

            core.setOutput('pr', prNumber || '');
            core.setOutput('sha', sha);
            core.setOutput('branch', branch || '');
            core.setOutput('state', state);

      - name: Set commit status (single visible check)
        uses: actions/github-script@v7
        with:
          script: |
            const sha = '${{ steps.ctx.outputs.sha }}';
            const state = '${{ steps.ctx.outputs.state }}';
            const stateMap = { STABLE: 'success', WORKING: 'success', WIP: 'pending', HOTFIX: 'success' };
            const descriptions = {
              STABLE: 'Working State: STABLE',
              WORKING: 'Working State: WORKING',
              WIP: 'Working State: WIP (Draft)',
              HOTFIX: 'Working State: HOTFIX'
            };
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha,
              state: stateMap[state] || 'success',
              context: 'working-state',
              description: descriptions[state] || `Working State: ${state}`
            });

      - name: Ensure PR label reflects state (if PR present)
        if: steps.ctx.outputs.pr != ''
        uses: actions/github-script@v7
        with:
          script: |
            const pr = Number('${{ steps.ctx.outputs.pr }}');
            const state = '${{ steps.ctx.outputs.state }}';
            const labelFor = (s) => ({
              name: `state: ${s.toLowerCase()}`,
              color: ({ STABLE: '2ea043', WORKING: 'f2cc60', WIP: 'fbca04', HOTFIX: 'd73a49' }[s]) || '8b949e',
              description: 'Working state marker'
            });
            const desired = labelFor(state);
            const states = ['STABLE','WORKING','WIP','HOTFIX'];

            // Ensure label exists
            try {
              await github.rest.issues.getLabel({ owner: context.repo.owner, repo: context.repo.repo, name: desired.name });
            } catch {
              await github.rest.issues.createLabel({ owner: context.repo.owner, repo: context.repo.repo, ...desired });
            }

            // Remove other state labels and add desired
            const { data: prData } = await github.rest.issues.get({ owner: context.repo.owner, repo: context.repo.repo, issue_number: pr });
            const existing = prData.labels.map(l => typeof l === 'string' ? l : l.name);
            for (const s of states) {
              const name = labelFor(s).name;
              if (name !== desired.name && existing.includes(name)) {
                try { await github.rest.issues.removeLabel({ owner: context.repo.owner, repo: context.repo.repo, issue_number: pr, name }); } catch {}
              }
            }
            if (!existing.includes(desired.name)) {
              await github.rest.issues.addLabels({ owner: context.repo.owner, repo: context.repo.repo, issue_number: pr, labels: [desired.name] });
            }

      - name: Create or move floating tag (optional)
        if: inputs.tag == 'true'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          STATE="${{ steps.ctx.outputs.state }}"
          SHA="${{ steps.ctx.outputs.sha }}"
          BRANCH="${{ steps.ctx.outputs.branch }}"
          PR="${{ steps.ctx.outputs.pr }}"
          SAFE_BRANCH=$(echo "$BRANCH" | tr '/' '-')
          if [[ -n "$PR" ]]; then
            TAG="state-${STATE,,}-pr-${PR}"
          elif [[ -n "$SAFE_BRANCH" ]]; then
            TAG="state-${STATE,,}-${SAFE_BRANCH}"
          else
            TAG="state-${STATE,,}"
          fi
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag -f "$TAG" "$SHA"
          git push -f origin "$TAG"

