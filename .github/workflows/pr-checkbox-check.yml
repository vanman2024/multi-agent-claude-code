name: PR Checkbox Check

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]
  push:
    branches-ignore:
      - main
      - master

permissions:
  contents: read
  statuses: write
  pull-requests: write
  issues: read
  checks: write

jobs:
  check-boxes:
    name: Check Issue Checkboxes
    runs-on: ubuntu-latest
    steps:
      - name: Verify Linked Issue Checkboxes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get PR information
            let prNumber;
            let prBody;
            
            if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
              prBody = context.payload.pull_request.body;
            } else {
              // For push events, find the PR
              const branch = context.ref.replace('refs/heads/', '');
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${branch}`,
                state: 'open'
              });
              
              if (prs.length === 0) {
                console.log('No open PR found for this push');
                return;
              }
              
              prNumber = prs[0].number;
              prBody = prs[0].body;
            }
            
            // Check if this is a hotfix (bypass check)
            if (context.ref && context.ref.includes('hotfix')) {
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: 'success',
                context: 'Issue Checkboxes',
                description: 'Hotfix - bypassing checkbox check'
              });
              return;
            }
            
            // Find linked issue
            const issueMatch = prBody?.match(/(?:Closes|Fixes|Resolves)\s+#(\d+)/i);
            
            if (!issueMatch) {
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: 'failure',
                context: 'Issue Checkboxes',
                description: 'No linked issue found (use "Closes #XXX")'
              });
              
              core.setFailed('PR must be linked to an issue using "Closes #XXX"');
              return;
            }
            
            const issueNumber = parseInt(issueMatch[1]);
            console.log(`Found linked issue: #${issueNumber}`);
            
            // Get the issue
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            
            // Count checkboxes
            const uncheckedBoxes = (issue.body?.match(/- \[ \]/g) || []).length;
            const checkedBoxes = (issue.body?.match(/- \[x\]/gi) || []).length;
            const totalBoxes = uncheckedBoxes + checkedBoxes;
            
            console.log(`Issue #${issueNumber}: ${checkedBoxes}/${totalBoxes} checkboxes complete`);
            
            if (totalBoxes === 0) {
              // No checkboxes in issue
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: 'success',
                context: 'Issue Checkboxes',
                description: 'No checkboxes to verify'
              });
              return;
            }
            
            if (uncheckedBoxes > 0) {
              // Fail the check
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: 'failure',
                context: 'Issue Checkboxes',
                description: `${uncheckedBoxes} unchecked boxes in issue #${issueNumber}`,
                target_url: issue.html_url
              });
              
              // Add/update PR comment
              if (prNumber) {
                const { data: comments } = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber
                });
                
                const botComment = comments.find(c => 
                  c.user.type === 'Bot' && 
                  c.body.includes('Cannot merge: Issue requirements incomplete')
                );
                
                const message = `## ❌ Cannot merge: Issue requirements incomplete
                
**Issue #${issueNumber}** has **${uncheckedBoxes}** unchecked requirement(s).

**Progress:** ${checkedBoxes}/${totalBoxes} checkboxes complete (${Math.round(checkedBoxes/totalBoxes * 100)}%)

Please complete all requirements in the linked issue before this PR can be merged.

[View Issue #${issueNumber}](${issue.html_url})`;
                
                if (botComment) {
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComment.id,
                    body: message
                  });
                } else {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: message
                  });
                }
              }
              
              core.setFailed(`Issue #${issueNumber} has ${uncheckedBoxes} unchecked requirements`);
            } else {
              // All checkboxes are checked
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: 'success',
                context: 'Issue Checkboxes',
                description: `All ${totalBoxes} requirements complete`,
                target_url: issue.html_url
              });
              
              console.log('✅ All issue requirements are complete!');
            }