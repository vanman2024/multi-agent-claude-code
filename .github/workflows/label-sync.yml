name: Label Management

on:
  push:
    branches: [main]
    paths:
      - '.github/labels.yml'
  issues:
    types: [labeled, unlabeled]
  pull_request:
    types: [labeled, unlabeled]
  workflow_dispatch:
  schedule:
    # Run weekly to ensure consistency
    - cron: '0 2 * * 1'

jobs:
  sync-labels:
    name: Sync and Enforce Labels
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Sync Labels from Config
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        uses: EndBug/label-sync@v2
        with:
          config-file: .github/labels.yml
          delete-other-labels: true  # Remove any labels not in config
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Validate Labels on Issues/PRs
        if: github.event_name == 'issues' || github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            // Define allowed labels directly (simpler than reading file)
            const allowedLabels = [
              'bug', 'feature', 'enhancement', 'refactor', 
              'documentation', 'test', 'chore', 'dependencies'
            ];
            
            // Get current labels
            const item = context.payload.issue || context.payload.pull_request;
            const currentLabels = item.labels.map(l => l.name);
            
            // Find and remove unauthorized labels
            const unauthorized = currentLabels.filter(l => !allowedLabels.includes(l));
            
            if (unauthorized.length > 0) {
              console.log(`Removing unauthorized labels: ${unauthorized.join(', ')}`);
              
              for (const label of unauthorized) {
                try {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: item.number,
                    name: label
                  });
                } catch (e) {
                  console.log(`Could not remove label ${label}: ${e.message}`);
                }
              }
              
              // Comment about removal
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: item.number,
                body: `üè∑Ô∏è **Removed unauthorized labels:** ${unauthorized.join(', ')}\n\nOnly these labels are allowed: bug, feature, enhancement, refactor, documentation, test, chore, dependencies`
              });
            }