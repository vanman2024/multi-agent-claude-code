name: 'ðŸ’¬ Gemini CLI'

on:
  pull_request_review_comment:
    types:
      - 'created'
  pull_request_review:
    types:
      - 'submitted'
  issue_comment:
    types:
      - 'created'

concurrency:
  group: '${{ github.workflow }}-${{ github.event.issue.number }}'
  cancel-in-progress: |-
    ${{ github.event.sender.type == 'User' && ( github.event.issue.author_association == 'OWNER' || github.event.issue.author_association == 'MEMBER' || github.event.issue.author_association == 'COLLABORATOR') }}

defaults:
  run:
    shell: 'bash'

permissions:
  contents: 'write'
  id-token: 'write'
  pull-requests: 'write'
  issues: 'write'

jobs:
  gemini-cli:
    # This condition is complex to ensure we only run when explicitly invoked.
    if: |-
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'issues' && github.event.action == 'opened' &&
        (
          contains(github.event.issue.body, '@gemini-cli') ||
          contains(github.event.issue.body, '@gemini ')
        ) &&
        !contains(github.event.issue.body, '/review') &&
        !contains(github.event.issue.body, '/triage') &&
        (
          github.event.sender.type == 'User' && (
            github.event.issue.author_association == 'OWNER' ||
            github.event.issue.author_association == 'MEMBER' ||
            github.event.issue.author_association == 'COLLABORATOR'
          )
        )
      ) ||
      (
        github.event_name == 'issue_comment' &&
        (
          contains(github.event.comment.body, '@gemini-cli') ||
          contains(github.event.comment.body, '@gemini ')
        ) &&
        !contains(github.event.comment.body, '/review') &&
        !contains(github.event.comment.body, '/triage') &&
        (
          github.event.sender.type == 'User' && (
            github.event.comment.author_association == 'OWNER' ||
            github.event.comment.author_association == 'MEMBER' ||
            github.event.comment.author_association == 'COLLABORATOR'
          )
        )
      ) ||
      (
        github.event_name == 'pull_request_review' &&
        (
          contains(github.event.review.body, '@gemini-cli') ||
          contains(github.event.review.body, '@gemini ')
        ) &&
        !contains(github.event.review.body, '/review') &&
        !contains(github.event.review.body, '/triage') &&
        (
          github.event.sender.type == 'User' && (
            github.event.review.author_association == 'OWNER' ||
            github.event.review.author_association == 'MEMBER' ||
            github.event.review.author_association == 'COLLABORATOR'
          )
        )
      ) ||
      (
        github.event_name == 'pull_request_review_comment' &&
        (
          contains(github.event.comment.body, '@gemini-cli') ||
          contains(github.event.comment.body, '@gemini ')
        ) &&
        !contains(github.event.comment.body, '/review') &&
        !contains(github.event.comment.body, '/triage') &&
        (
          github.event.sender.type == 'User' && (
            github.event.comment.author_association == 'OWNER' ||
            github.event.comment.author_association == 'MEMBER' ||
            github.event.comment.author_association == 'COLLABORATOR'
          )
        )
      )
    timeout-minutes: 10
    runs-on: 'ubuntu-latest'

    steps:
      - name: 'Generate GitHub App Token'
        id: 'generate_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b' # ratchet:actions/create-github-app-token@v2
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      - name: 'Get context from event'
        id: 'get_context'
        env:
          EVENT_NAME: '${{ github.event_name }}'
          EVENT_PAYLOAD: '${{ toJSON(github.event) }}'
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          REPOSITORY: '${{ github.repository }}'
        run: |-
          set -euo pipefail

          USER_REQUEST=""
          ISSUE_NUMBER=""
          IS_PR="false"

          if [[ "${EVENT_NAME}" == "issues" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .issue.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .issue.number)
          elif [[ "${EVENT_NAME}" == "issue_comment" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .comment.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .issue.number)
            if [[ $(echo "${EVENT_PAYLOAD}" | jq -r .issue.pull_request) != "null" ]]; then
              IS_PR="true"
            fi
          elif [[ "${EVENT_NAME}" == "pull_request_review" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .review.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .pull_request.number)
            IS_PR="true"
          elif [[ "${EVENT_NAME}" == "pull_request_review_comment" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .comment.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .pull_request.number)
            IS_PR="true"
          fi

          # Clean up user request by removing @gemini-cli or @gemini prefix
          if [[ ${USER_REQUEST} == *"@gemini-cli"* ]]; then
            USER_REQUEST=$(echo "${USER_REQUEST}" | sed 's/.*@gemini-cli//' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          elif [[ ${USER_REQUEST} == *"@gemini "* ]]; then
            USER_REQUEST=$(echo "${USER_REQUEST}" | sed 's/.*@gemini //' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          fi

          if [[ "${IS_PR}" == "true" ]]; then
            COMMENT_COMMAND="gh pr comment \"${ISSUE_NUMBER}\" --body-file response.md"
          else
            COMMENT_COMMAND="gh issue comment \"${ISSUE_NUMBER}\" --body-file response.md"
          fi

          {
            echo "user_request<<EOF"
            echo "${USER_REQUEST}"
            echo "EOF"
            echo "issue_number=${ISSUE_NUMBER}"
            echo "is_pr=${IS_PR}"
            echo "comment_command=${COMMENT_COMMAND}"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Set up git user for commits'
        run: |-
          git config --global user.name 'gemini-cli[bot]'
          git config --global user.email 'gemini-cli[bot]@users.noreply.github.com'

      - name: 'Checkout PR branch'
        if: |-
          ${{  steps.get_context.outputs.is_pr == 'true' }}
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4
        with:
          token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          repository: '${{ github.repository }}'
          ref: 'refs/pull/${{ steps.get_context.outputs.issue_number }}/head'
          fetch-depth: 0

      - name: 'Checkout main branch'
        if: |-
          ${{  steps.get_context.outputs.is_pr == 'false' }}
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4
        with:
          token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          repository: '${{ github.repository }}'
          fetch-depth: 0

      - name: 'Create new branch for issue'
        if: |-
          ${{  steps.get_context.outputs.is_pr == 'false' }}
        run: |-
          set -euo pipefail
          BRANCH_NAME="gemini-issue-${{ steps.get_context.outputs.issue_number }}"
          git checkout -b "${BRANCH_NAME}"
          echo "branch_name=${BRANCH_NAME}" >> "${GITHUB_OUTPUT}"
        id: 'create_branch'

      - name: 'Acknowledge request'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
          REPOSITORY: '${{ github.repository }}'
        run: |-
          set -euo pipefail
          gh issue comment "${ISSUE_NUMBER}" \
            --body "I've received your request and I'm working on it now! ðŸ¤–" \
            --repo "${REPOSITORY}"

      - name: 'Run Gemini'
        id: 'run_gemini'
        uses: 'google-github-actions/run-gemini-cli@v0'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          REPOSITORY: '${{ github.repository }}'
          USER_REQUEST: '${{ steps.get_context.outputs.user_request }}\nPlease respond to me by commenting your response. Please execute ${{ steps.get_context.outputs.comment_command }} to respond.'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
          IS_PR: '${{ steps.get_context.outputs.is_pr }}'
          BRANCH_NAME: '${{ steps.create_branch.outputs.branch_name }}'
          COMMENT_COMMAND: '${{ steps.get_context.outputs.comment_command }}'
        with:
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          settings: |-
            {
              "maxSessionTurns": 50,
              "coreTools": [
                "run_shell_command(echo)",
                "run_shell_command(gh pr view)",
                "run_shell_command(gh pr diff)",
                "run_shell_command(gh pr list)",
                "run_shell_command(gh issue view)",
                "run_shell_command(gh issue comment)",
                "run_shell_command(gh issue list)",
                "run_shell_command(gh pr comment)",
                "run_shell_command(cat)",
                "run_shell_command(head)",
                "run_shell_command(tail)",
                "run_shell_command(grep)",
                "run_shell_command(git config)",
                "run_shell_command(git status)",
                "run_shell_command(git add)",
                "run_shell_command(git commit)",
                "run_shell_command(git push)",
                "run_shell_command(git diff)",
                "write_file"
              ],
              "telemetry": {
                "enabled": false,
                "target": "gcp"
              }
            }
          prompt: |-
            ## Role & Goal

            You are an AI assistant in a GitHub workflow. Your goal is to understand a user's request and respond helpfully by posting comments to the GitHub issue or pull request.

            ## Context

            - **Repository**: '${{ github.repository }}'
            - **Triggering Event**: '${{ github.event_name }}'
            - **Issue/PR Number**: '${{ env.ISSUE_NUMBER }}'
            - **Is this a PR?**: '${{ env.IS_PR }}'
            - **Branch Name**: '${{ env.BRANCH_NAME }}'
            - **User Request**: '${{ env.USER_REQUEST }}'
            - **Comment Command**: '${{ env.COMMENT_COMMAND }}'

            ## Instructions

            1. **Analyze the user's request** and provide a helpful response.
            2. **Use your available tools** to gather information, analyze code, or make changes as requested.
            3. **Write your response to `response.md`** using markdown formatting.
            4. **Execute the comment command** in `COMMENT_COMMAND` to post your response.
            5. **If making code changes:**
               - Never commit directly to `main` branch
               - Commit to the appropriate branch (PR branch or new branch for issues)
               - Use descriptive commit messages
               - Push changes when ready

            ## Available Tools

            You have access to various shell commands and tools including:
            - GitHub CLI (`gh`) for interacting with issues and PRs
            - Git commands for version control
            - File operations for reading and writing code
            - Standard Unix tools for text processing

            ## General Rules

            - Be helpful and concise in your responses
            - Use markdown formatting for clear communication
            - Ask for clarification if the request is ambiguous
            - Always execute the comment command to respond to the user
            - Be mindful of security and don't expose sensitive information
