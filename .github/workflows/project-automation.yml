name: Dynamic Project Board Automation

on:
  issues:
    types: [opened, edited, labeled, unlabeled, assigned, closed, reopened]
  pull_request:
    types: [opened, edited, labeled, unlabeled, assigned, closed, merged]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to add to project'
        required: false

permissions:
  contents: write
  issues: write
  pull-requests: write
  projects: write

jobs:
  discover-project:
    name: Discover Project Configuration
    runs-on: ubuntu-latest
    outputs:
      project-id: ${{ steps.find-project.outputs.project-id }}
      project-number: ${{ steps.find-project.outputs.project-number }}
      status-field: ${{ steps.find-project.outputs.status-field }}
      priority-field: ${{ steps.find-project.outputs.priority-field }}
      component-field: ${{ steps.find-project.outputs.component-field }}
      iteration-field: ${{ steps.find-project.outputs.iteration-field }}
      status-options: ${{ steps.find-project.outputs.status-options }}
      priority-options: ${{ steps.find-project.outputs.priority-options }}
      component-options: ${{ steps.find-project.outputs.component-options }}
      
    steps:
      - name: Find Active Project
        id: find-project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            // Find the most recent project for this repository
            // This assumes the project name contains the repo name
            const repoName = context.repo.repo;
            
            const query = `
              query($login: String!) {
                user(login: $login) {
                  projectsV2(first: 20, orderBy: {field: CREATED_AT, direction: DESC}) {
                    nodes {
                      id
                      number
                      title
                      fields(first: 20) {
                        nodes {
                          ... on ProjectV2Field {
                            id
                            name
                          }
                          ... on ProjectV2SingleSelectField {
                            id
                            name
                            options {
                              id
                              name
                            }
                          }
                          ... on ProjectV2IterationField {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const result = await github.graphql(query, {
              login: context.repo.owner
            });
            
            // Find project that matches this repo or use the most recent
            let project = result.user.projectsV2.nodes.find(p => 
              p.title.toLowerCase().includes(repoName.toLowerCase())
            );
            
            // If no repo-specific project, use the most recent one
            if (!project) {
              project = result.user.projectsV2.nodes[0];
            }
            
            if (project) {
              core.setOutput('project-id', project.id);
              core.setOutput('project-number', project.number);
              
              // Find field IDs
              const fields = project.fields.nodes;
              const statusField = fields.find(f => f.name === 'Status');
              const priorityField = fields.find(f => f.name === 'Priority');
              const componentField = fields.find(f => f.name === 'Component');
              const iterationField = fields.find(f => f.name === 'Iteration');
              
              if (statusField) core.setOutput('status-field', statusField.id);
              if (priorityField) core.setOutput('priority-field', priorityField.id);
              if (componentField) core.setOutput('component-field', componentField.id);
              if (iterationField) core.setOutput('iteration-field', iterationField.id);
              
              console.log(`Found project: ${project.title} (#${project.number})`);
              
              // Store field options for later use
              if (statusField && statusField.options) {
                const statusOptions = {};
                statusField.options.forEach(opt => {
                  statusOptions[opt.name.toLowerCase().replace(/\s+/g, '-')] = opt.id;
                });
                core.setOutput('status-options', JSON.stringify(statusOptions));
              } else {
                core.setOutput('status-options', '{}');
              }
              
              if (priorityField && priorityField.options) {
                const priorityOptions = {};
                priorityField.options.forEach(opt => {
                  priorityOptions[opt.name.toLowerCase()] = opt.id;
                });
                core.setOutput('priority-options', JSON.stringify(priorityOptions));
              } else {
                core.setOutput('priority-options', '{}');
              }
              
              if (componentField && componentField.options) {
                const componentOptions = {};
                componentField.options.forEach(opt => {
                  componentOptions[opt.name.toLowerCase().replace(/\s+/g, '-')] = opt.id;
                });
                core.setOutput('component-options', JSON.stringify(componentOptions));
              } else {
                core.setOutput('component-options', '{}');
              }
            } else {
              core.setFailed('No project found for this repository');
            }

  add-to-project:
    name: Add Issue/PR to Project
    runs-on: ubuntu-latest
    needs: discover-project
    if: |
      github.event.action == 'opened' || 
      github.event_name == 'workflow_dispatch'
    outputs:
      item-id: ${{ steps.add-to-project.outputs.itemId }}
    
    steps:
      - name: Add to project
        id: add-to-project
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/users/${{ github.repository_owner }}/projects/${{ needs.discover-project.outputs.project-number }}
          github-token: ${{ secrets.PROJECT_TOKEN }}
          
      - name: Get item ID
        id: get-item
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const query = `
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                            number
                          }
                          ... on PullRequest {
                            id
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const contentId = context.payload.issue?.node_id || context.payload.pull_request?.node_id;
            const variables = {
              projectId: '${{ needs.discover-project.outputs.project-id }}'
            };
            
            const result = await github.graphql(query, variables);
            const item = result.node.items.nodes.find(i => i.content?.id === contentId);
            
            if (item) {
              core.setOutput('itemId', item.id);
              console.log(`Found project item: ${item.id}`);
            }

  set-fields-from-labels:
    name: Set Project Fields from Labels
    runs-on: ubuntu-latest
    needs: [discover-project, add-to-project]
    if: |
      needs.add-to-project.outputs.item-id &&
      (github.event.action == 'labeled' || github.event.action == 'opened')
    
    steps:
      - name: Process Labels and Set Fields
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const labels = context.payload.issue?.labels || context.payload.pull_request?.labels || [];
            const projectId = '${{ needs.discover-project.outputs.project-id }}';
            const itemId = '${{ needs.add-to-project.outputs.item-id }}';
            
            // Helper function to update field
            async function updateField(fieldId, value) {
              if (!fieldId) return;
              
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                  updateProjectV2ItemFieldValue(
                    input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: $value
                    }
                  ) {
                    projectV2Item { id }
                  }
                }
              `;
              
              await github.graphql(mutation, {
                projectId: projectId,
                itemId: itemId,
                fieldId: fieldId,
                value: value
              });
            }
            
            // Set Status to Todo for new issues
            if (github.event.action === 'opened') {
              const statusField = '${{ needs.discover-project.outputs.status-field }}';
              const statusOptionsStr = '${{ needs.discover-project.outputs.status-options }}';
              const statusOptions = statusOptionsStr ? JSON.parse(statusOptionsStr) : {};
              
              if (statusField && statusOptions['todo']) {
                await updateField(statusField, { singleSelectOptionId: statusOptions['todo'] });
              }
              
              // Set Created Date
              const today = new Date().toISOString().split('T')[0];
              // Note: We'd need to discover date field ID too
            }
            
            // Handle Priority label
            const priorityLabel = labels.find(l => l.name.startsWith('priority:'));
            if (priorityLabel) {
              const priority = priorityLabel.name.split(':')[1].toLowerCase();
              const priorityField = '${{ needs.discover-project.outputs.priority-field }}';
              const priorityOptionsStr = '${{ needs.discover-project.outputs.priority-options }}';
              const priorityOptions = priorityOptionsStr ? JSON.parse(priorityOptionsStr) : {};
              
              if (priorityField && priorityOptions[priority]) {
                await updateField(priorityField, { singleSelectOptionId: priorityOptions[priority] });
                
                // Set Iteration based on priority
                const iterationField = '${{ needs.discover-project.outputs.iteration-field }}';
                if (iterationField) {
                  // Get current iterations
                  const query = `
                    query($projectId: ID!) {
                      node(id: $projectId) {
                        ... on ProjectV2 {
                          field(name: "Iteration") {
                            ... on ProjectV2IterationField {
                              configuration {
                                iterations {
                                  id
                                  title
                                  startDate
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  `;
                  
                  const result = await github.graphql(query, { projectId: projectId });
                  const iterations = result.node.field?.configuration?.iterations || [];
                  
                  let iterationId;
                  // P0 -> Current, P1 -> Next, P2/P3 -> Future
                  switch(priority) {
                    case 'p0':
                      iterationId = iterations[0]?.id;
                      break;
                    case 'p1':
                      iterationId = iterations[1]?.id || iterations[0]?.id;
                      break;
                    case 'p2':
                    case 'p3':
                      iterationId = iterations[2]?.id || iterations[1]?.id || iterations[0]?.id;
                      break;
                  }
                  
                  if (iterationId) {
                    await updateField(iterationField, { iterationId: iterationId });
                  }
                }
              }
            }
            
            // Handle Component label
            const componentLabel = labels.find(l => l.name.startsWith('component:'));
            if (componentLabel) {
              const component = componentLabel.name.split(':')[1].toLowerCase().replace(/\s+/g, '-');
              const componentField = '${{ needs.discover-project.outputs.component-field }}';
              const componentOptionsStr = '${{ needs.discover-project.outputs.component-options }}';
              const componentOptions = componentOptionsStr ? JSON.parse(componentOptionsStr) : {};
              
              if (componentField && componentOptions[component]) {
                await updateField(componentField, { singleSelectOptionId: componentOptions[component] });
              }
            }

  handle-status-commands:
    name: Handle Status Commands
    runs-on: ubuntu-latest
    needs: discover-project
    if: |
      github.event_name == 'issue_comment' && 
      contains(github.event.comment.body, '/working-on-this')
    
    steps:
      - name: Update Status to In Progress
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            // Find the project item for this issue
            const query = `
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const projectId = '${{ needs.discover-project.outputs.project-id }}';
            const result = await github.graphql(query, { projectId: projectId });
            
            const item = result.node.items.nodes.find(i => 
              i.content?.id === context.payload.issue.node_id
            );
            
            if (item) {
              // Get status field options
              const statusQuery = `
                query($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      field(name: "Status") {
                        ... on ProjectV2SingleSelectField {
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const statusResult = await github.graphql(statusQuery, { projectId: projectId });
              const inProgressOption = statusResult.node.field?.options?.find(o => 
                o.name.toLowerCase() === 'in progress'
              );
              
              if (inProgressOption) {
                const mutation = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                    updateProjectV2ItemFieldValue(
                      input: {
                        projectId: $projectId
                        itemId: $itemId
                        fieldId: $fieldId
                        value: $value
                      }
                    ) {
                      projectV2Item { id }
                    }
                  }
                `;
                
                await github.graphql(mutation, {
                  projectId: projectId,
                  itemId: item.id,
                  fieldId: '${{ needs.discover-project.outputs.status-field }}',
                  value: { singleSelectOptionId: inProgressOption.id }
                });
                
                // Add reaction
                await github.rest.reactions.createForIssueComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: context.payload.comment.id,
                  content: 'rocket'
                });
              }
            }