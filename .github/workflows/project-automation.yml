name: Project Board Automation

on:
  issues:
    types: [opened, edited, labeled, unlabeled, assigned, closed, reopened]
  pull_request:
    types: [opened, edited, labeled, unlabeled, assigned, closed, merged]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to add to project'
        required: false

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  PROJECT_ID: PVT_kwHOCu1OR84BA3ip  # Multi-Agent Claude Code Development
  PROJECT_NUMBER: 11
  
  # Field IDs from our project
  STATUS_FIELD: PVTSSF_lAHOCu1OR84BA3ipzgziw9A
  PRIORITY_FIELD: PVTSSF_lAHOCu1OR84BA3ipzgzixBc
  COMPONENT_FIELD: PVTSSF_lAHOCu1OR84BA3ipzgzixC0
  
  # Status option IDs
  STATUS_TODO: f75ad846
  STATUS_IN_PROGRESS: 47fc9ee4
  STATUS_DONE: 98236657
  
  # Priority option IDs
  PRIORITY_P0: 272850f8
  PRIORITY_P1: 257f709e
  PRIORITY_P2: 5041f9b5
  PRIORITY_P3: e6ae2685
  
  # Component option IDs (we only have 4 currently, will add more as needed)
  COMPONENT_FRONTEND: 83954b68
  COMPONENT_BACKEND: 8aa84839
  COMPONENT_DATABASE: eea4cd61
  COMPONENT_DEVOPS: 82f4b58a
  # Additional components to be added to project:
  # API, Authentication, Testing, Documentation, Security, 
  # Performance, Monitoring, Analytics, Payments, Messaging,
  # Search, Storage, CDN, ML/AI, Mobile, Desktop

jobs:
  add-to-project:
    name: Add Issue/PR to Project
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' || github.event_name == 'workflow_dispatch'
    outputs:
      item-id: ${{ steps.add-to-project.outputs.itemId }}
    
    steps:
      - name: Add to project
        id: add-to-project
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/users/${{ github.repository_owner }}/projects/${{ env.PROJECT_NUMBER }}
          github-token: ${{ secrets.PROJECT_TOKEN }}
          
      - name: Get item ID
        id: get-item
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const query = `
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                            number
                          }
                          ... on PullRequest {
                            id
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const contentId = context.payload.issue?.node_id || context.payload.pull_request?.node_id;
            const variables = {
              projectId: process.env.PROJECT_ID
            };
            
            const result = await github.graphql(query, variables);
            const item = result.node.items.nodes.find(i => i.content?.id === contentId);
            
            if (item) {
              core.setOutput('itemId', item.id);
              console.log(`Found item ID: ${item.id}`);
            }
            
  set-fields:
    name: Set Project Fields
    runs-on: ubuntu-latest
    needs: add-to-project
    if: needs.add-to-project.outputs.item-id
    
    steps:
      - name: Set Priority based on labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const itemId = '${{ needs.add-to-project.outputs.item-id }}';
            const labels = context.payload.issue?.labels || context.payload.pull_request?.labels || [];
            
            let priorityId = process.env.PRIORITY_P3; // default
            
            // Check labels for priority indicators
            if (labels.some(l => l.name === 'critical' || l.name === 'urgent')) {
              priorityId = process.env.PRIORITY_P0;
            } else if (labels.some(l => l.name === 'high-priority')) {
              priorityId = process.env.PRIORITY_P1;
            } else {
              priorityId = process.env.PRIORITY_P3; // Default to P3
            }
            
            // Check title for priority indicators
            const title = context.payload.issue?.title || context.payload.pull_request?.title || '';
            if (title.includes('[P0]') || title.includes('[CRITICAL]')) {
              priorityId = process.env.PRIORITY_P0;
            } else if (title.includes('[P1]') || title.includes('[URGENT]')) {
              priorityId = process.env.PRIORITY_P1;
            } else if (title.includes('[P2]')) {
              priorityId = process.env.PRIORITY_P2;
            }
            
            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: { singleSelectOptionId: $optionId }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;
            
            await github.graphql(mutation, {
              projectId: process.env.PROJECT_ID,
              itemId: itemId,
              fieldId: process.env.PRIORITY_FIELD,
              optionId: priorityId
            });
            
            console.log(`Set priority to ${priorityId}`);
            
      - name: Set Component based on labels and content
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const itemId = '${{ needs.add-to-project.outputs.item-id }}';
            const labels = context.payload.issue?.labels || context.payload.pull_request?.labels || [];
            const body = context.payload.issue?.body || context.payload.pull_request?.body || '';
            
            let componentId = null;
            
            // Check labels for component hints (using issue type labels, not component labels)
            if (labels.some(l => l.name === 'ui' || l.name === 'ux')) {
              componentId = process.env.COMPONENT_FRONTEND;
            } else if (labels.some(l => l.name === 'api' || l.name === 'server')) {
              componentId = process.env.COMPONENT_BACKEND;
            } else if (labels.some(l => l.name === 'database' || l.name === 'db')) {
              componentId = process.env.COMPONENT_DATABASE;
            } else if (labels.some(l => l.name === 'ci' || l.name === 'cd' || l.name === 'infrastructure')) {
              componentId = process.env.COMPONENT_DEVOPS;
            }
            
            // Check body content for component mentions
            if (!componentId && body.includes('Component:')) {
              if (body.toLowerCase().includes('frontend')) {
                componentId = process.env.COMPONENT_FRONTEND;
              } else if (body.toLowerCase().includes('backend')) {
                componentId = process.env.COMPONENT_BACKEND;
              } else if (body.toLowerCase().includes('database')) {
                componentId = process.env.COMPONENT_DATABASE;
              } else if (body.toLowerCase().includes('devops')) {
                componentId = process.env.COMPONENT_DEVOPS;
              }
            }
            
            if (componentId) {
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              
              await github.graphql(mutation, {
                projectId: process.env.PROJECT_ID,
                itemId: itemId,
                fieldId: process.env.COMPONENT_FIELD,
                optionId: componentId
              });
              
              console.log(`Set component to ${componentId}`);
            }
            
      - name: Set Initial Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const itemId = '${{ needs.add-to-project.outputs.item-id }}';
            
            // Default to TODO for new items
            let statusId = process.env.STATUS_TODO;
            
            // If it's a PR, set to In Progress
            if (context.payload.pull_request) {
              statusId = process.env.STATUS_IN_PROGRESS;
            }
            
            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: { singleSelectOptionId: $optionId }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;
            
            await github.graphql(mutation, {
              projectId: process.env.PROJECT_ID,
              itemId: itemId,
              fieldId: process.env.STATUS_FIELD,
              optionId: statusId
            });
            
            console.log(`Set status to ${statusId}`);
            
      - name: Set Sprint Fields and Iteration
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const itemId = '${{ needs.add-to-project.outputs.item-id }}';
            const issue = context.payload.issue;
            if (!issue) return; // Skip for PRs
            
            // Parse Sprint metadata from issue body
            const body = issue.body || '';
            
            // Get current date to determine iteration
            const currentDate = new Date().toISOString().split('T')[0];
            
            // Query for available iterations and fields
            const query = `
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 30) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                        ... on ProjectV2IterationField {
                          id
                          name
                          configuration {
                            iterations {
                              id
                              title
                              startDate
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const result = await github.graphql(query, {
              projectId: process.env.PROJECT_ID
            });
            
            const fields = result.node.fields.nodes;
            
            // Find Sprint fields
            const sprintPointsField = fields.find(f => f.name === 'Sprint Points');
            const sprintStatusField = fields.find(f => f.name === 'Sprint Status');
            const sprintGoalField = fields.find(f => f.name === 'Sprint Goal');
            const iterationField = fields.find(f => f.name === 'Iteration');
            const complexityField = fields.find(f => f.name === 'Complexity');
            
            // Parse sprint points from body (default 3)
            let sprintPoints = 3;
            const pointsMatch = body.match(/Points?:\s*(\d+)/i);
            if (pointsMatch) sprintPoints = parseInt(pointsMatch[1]);
            
            // Set Sprint Points
            if (sprintPointsField) {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: Float!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { number: $value }
                  }) {
                    projectV2Item { id }
                  }
                }
              `, {
                projectId: process.env.PROJECT_ID,
                itemId: itemId,
                fieldId: sprintPointsField.id,
                value: sprintPoints
              });
            }
            
            // Set Sprint Status to "Not Started"
            if (sprintStatusField) {
              const notStarted = sprintStatusField.options.find(o => o.name === 'Not Started');
              if (notStarted) {
                await github.graphql(`
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: { singleSelectOptionId: $optionId }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `, {
                  projectId: process.env.PROJECT_ID,
                  itemId: itemId,
                  fieldId: sprintStatusField.id,
                  optionId: notStarted.id
                });
              }
            }
            
            // Set Complexity based on issue content
            if (complexityField) {
              let complexityName = 'M'; // default
              
              // Check for complexity/size in body
              const complexityMatch = body.match(/(?:Complexity|Size):\s*(XS|S|M|L|XL)/i);
              if (complexityMatch) complexityName = complexityMatch[1].toUpperCase();
              
              const complexity = complexityField.options.find(o => o.name === complexityName);
              if (complexity) {
                await github.graphql(`
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: { singleSelectOptionId: $optionId }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `, {
                  projectId: process.env.PROJECT_ID,
                  itemId: itemId,
                  fieldId: complexityField.id,
                  optionId: complexity.id
                });
              }
            }
            
            // Set Sprint Goal based on issue content
            if (sprintGoalField) {
              let goalName = 'Features'; // default
              
              // Check for goal in body
              const goalMatch = body.match(/Goal:\s*(MVP|User Experience|Performance|Tech Debt|Features)/i);
              if (goalMatch) goalName = goalMatch[1];
              
              // Or infer from labels
              const labels = issue.labels || [];
              if (labels.some(l => l.name === 'performance')) goalName = 'Performance';
              else if (labels.some(l => l.name === 'tech-debt')) goalName = 'Tech Debt';
              else if (labels.some(l => l.name === 'ui' || l.name === 'ux')) goalName = 'User Experience';
              
              const goal = sprintGoalField.options.find(o => o.name === goalName);
              if (goal) {
                await github.graphql(`
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: { singleSelectOptionId: $optionId }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `, {
                  projectId: process.env.PROJECT_ID,
                  itemId: itemId,
                  fieldId: sprintGoalField.id,
                  optionId: goal.id
                });
              }
            }
            
            // Set Iteration based on current date and priority
            if (iterationField && iterationField.configuration) {
              const iterations = iterationField.configuration.iterations;
              
              // Find current iteration
              let currentIteration = iterations.find(i => i.startDate <= currentDate);
              
              // Override based on priority
              const priority = issue.title.includes('[P0]') ? 'P0' : 
                             issue.title.includes('[P1]') ? 'P1' :
                             body.includes('Priority: P0') ? 'P0' :
                             body.includes('Priority: P1') ? 'P1' : 'P2';
              
              // P0 = current iteration, P1 = current or next, P2+ = next
              if (priority === 'P0') {
                // Use current iteration
              } else if (priority === 'P1' && iterations[1]) {
                currentIteration = iterations[1]; // next iteration
              } else if (iterations[2]) {
                currentIteration = iterations[2]; // future iteration
              }
              
              if (currentIteration) {
                await github.graphql(`
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $iterationId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: { iterationId: $iterationId }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `, {
                  projectId: process.env.PROJECT_ID,
                  itemId: itemId,
                  fieldId: iterationField.id,
                  iterationId: currentIteration.id
                });
                
                console.log(`Set iteration to ${currentIteration.title}`);
              }
            }


  update-status-on-progress:
    name: Update Status on Progress
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issues' && github.event.action == 'assigned') ||
      (github.event_name == 'pull_request' && github.event.action == 'opened')
    
    steps:
      - name: Move to In Progress
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            // Get the issue number
            let issueNumber;
            if (context.payload.issue) {
              issueNumber = context.payload.issue.number;
            } else if (context.payload.pull_request) {
              // Extract issue number from PR body or title
              const prBody = context.payload.pull_request.body || '';
              const prTitle = context.payload.pull_request.title || '';
              const match = (prBody + prTitle).match(/#(\d+)/);
              if (match) {
                issueNumber = match[1];
              }
            }
            
            if (!issueNumber) return;
            
            // Find the project item
            const query = `
              query {
                repository(owner: "${{ github.repository_owner }}", name: "${{ github.event.repository.name }}") {
                  issue(number: ${issueNumber}) {
                    projectItems(first: 10) {
                      nodes {
                        id
                        project {
                          id
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const result = await github.graphql(query);
            const projectItem = result.repository.issue.projectItems.nodes.find(
              item => item.project.id === process.env.PROJECT_ID
            );
            
            if (projectItem) {
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              
              await github.graphql(mutation, {
                projectId: process.env.PROJECT_ID,
                itemId: projectItem.id,
                fieldId: process.env.STATUS_FIELD,
                optionId: process.env.STATUS_IN_PROGRESS
              });
              
              console.log('Moved to In Progress');
            }

  update-status-on-close:
    name: Update Status on Close
    runs-on: ubuntu-latest
    if: |
      (github.event.action == 'closed') ||
      (github.event_name == 'pull_request' && github.event.action == 'merged')
    
    steps:
      - name: Move to Done
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const contentId = context.payload.issue?.node_id || context.payload.pull_request?.node_id;
            
            const query = `
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            id
                          }
                          ... on PullRequest {
                            id
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const result = await github.graphql(query, {
              projectId: process.env.PROJECT_ID
            });
            
            const item = result.node.items.nodes.find(i => i.content?.id === contentId);
            
            if (item) {
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $optionId }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              
              await github.graphql(mutation, {
                projectId: process.env.PROJECT_ID,
                itemId: item.id,
                fieldId: process.env.STATUS_FIELD,
                optionId: process.env.STATUS_DONE
              });
              
              console.log('Moved to Done');
            }