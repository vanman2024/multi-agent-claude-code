name: API Testing with Postman

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'backend/**'
      - 'api/**'
      - 'server/**'
      - 'postman/**'
      - '**.postman_collection.json'
      - '**.postman_environment.json'
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - 'api/**'
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours for monitoring

jobs:
  postman-tests:
    name: Run Postman Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Newman (Postman CLI)
        run: npm install -g newman newman-reporter-htmlextra
        
      - name: Find Postman Collections
        id: find-collections
        run: |
          # Find all Postman collection files
          COLLECTIONS=$(find . -name "*.postman_collection.json" -type f)
          echo "Found collections: $COLLECTIONS"
          echo "collections=$COLLECTIONS" >> $GITHUB_OUTPUT
          
          # Find environment files
          ENVIRONMENTS=$(find . -name "*.postman_environment.json" -type f | head -1)
          echo "environment=$ENVIRONMENTS" >> $GITHUB_OUTPUT
          
      - name: Wait for Staging Deployment
        if: github.event_name == 'pull_request'
        run: |
          echo "Waiting for staging deployment to be ready..."
          sleep 30  # Give staging time to deploy
          
      - name: Run API Tests - Staging
        if: github.event_name == 'pull_request' && steps.find-collections.outputs.collections != ''
        run: |
          # Set staging URL
          export API_URL=${{ secrets.STAGING_API_URL }}
          
          # Run tests for each collection
          for collection in ${{ steps.find-collections.outputs.collections }}; do
            echo "Running collection: $collection"
            
            newman run "$collection" \
              --environment "${{ steps.find-collections.outputs.environment }}" \
              --env-var "baseUrl=$API_URL" \
              --reporters cli,htmlextra \
              --reporter-htmlextra-export "reports/$(basename $collection .json).html" \
              --bail \
              || echo "Tests failed for $collection"
          done
        continue-on-error: true
        
      - name: Run API Tests - Production
        if: github.ref == 'refs/heads/main' && steps.find-collections.outputs.collections != ''
        run: |
          # Set production URL
          export API_URL=${{ secrets.PRODUCTION_API_URL }}
          
          # Run smoke tests only in production
          for collection in ${{ steps.find-collections.outputs.collections }}; do
            echo "Running smoke tests for: $collection"
            
            newman run "$collection" \
              --environment "${{ steps.find-collections.outputs.environment }}" \
              --env-var "baseUrl=$API_URL" \
              --folder "Smoke Tests" \
              --reporters cli,htmlextra \
              --reporter-htmlextra-export "reports/smoke-$(basename $collection .json).html" \
              || echo "Smoke tests failed for $collection"
          done
        continue-on-error: true
        
      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: postman-test-reports
          path: reports/*.html
          
      - name: Comment Test Results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let testResults = '## üß™ API Test Results\n\n';
            
            // Check if reports directory exists
            if (fs.existsSync('reports')) {
              const files = fs.readdirSync('reports');
              
              if (files.length > 0) {
                testResults += '| Collection | Status | Report |\n';
                testResults += '|------------|--------|--------|\n';
                
                files.forEach(file => {
                  const name = path.basename(file, '.html');
                  // Simple check - if file exists, tests ran
                  const status = fs.statSync(`reports/${file}`).size > 0 ? '‚úÖ Ran' : '‚ùå Failed';
                  testResults += `| ${name} | ${status} | [View](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |\n`;
                });
              } else {
                testResults += '‚ö†Ô∏è No test reports generated\n';
              }
            } else {
              testResults += 'üìù No Postman collections found in repository\n';
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: testResults
            });

  webhook-testing:
    name: Webhook Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Webhook Testing
        id: webhook-setup
        run: |
          # Get staging URL for webhook testing
          WEBHOOK_URL="${{ secrets.STAGING_API_URL }}/webhooks"
          echo "webhook_url=$WEBHOOK_URL" >> $GITHUB_OUTPUT
          
          # Generate unique webhook ID for this test run
          WEBHOOK_ID="test-${{ github.run_id }}-${{ github.run_number }}"
          echo "webhook_id=$WEBHOOK_ID" >> $GITHUB_OUTPUT
          
      - name: Test Webhook Endpoints
        run: |
          WEBHOOK_URL="${{ steps.webhook-setup.outputs.webhook_url }}"
          
          # Test webhook receive endpoint
          echo "Testing webhook receive endpoint..."
          curl -X POST "$WEBHOOK_URL/test" \
            -H "Content-Type: application/json" \
            -H "X-Webhook-Id: ${{ steps.webhook-setup.outputs.webhook_id }}" \
            -d '{"event": "test", "data": {"message": "GitHub Actions webhook test"}}' \
            -w "\nHTTP Status: %{http_code}\n" \
            || echo "Webhook test failed"
            
          # Test webhook signature verification
          echo "Testing webhook signature verification..."
          PAYLOAD='{"event": "signature_test"}'
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac "${{ secrets.WEBHOOK_SECRET }}" | sed 's/^.* //')
          
          curl -X POST "$WEBHOOK_URL/github" \
            -H "Content-Type: application/json" \
            -H "X-Hub-Signature-256: sha256=$SIGNATURE" \
            -d "$PAYLOAD" \
            -w "\nHTTP Status: %{http_code}\n" \
            || echo "Signature verification test failed"
        continue-on-error: true
        
      - name: Load Test Webhooks
        if: github.event.name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'load-test')
        run: |
          echo "Running webhook load test..."
          
          # Install hey for load testing
          wget https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64
          chmod +x hey_linux_amd64
          
          # Run load test
          ./hey_linux_amd64 -n 1000 -c 10 -m POST \
            -H "Content-Type: application/json" \
            -H "X-Webhook-Id: load-test-${{ github.run_id }}" \
            -d '{"event": "load_test", "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}' \
            "${{ steps.webhook-setup.outputs.webhook_url }}/test" \
            > load-test-results.txt
            
          cat load-test-results.txt
          
      - name: Comment Webhook Test Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const webhookUrl = '${{ steps.webhook-setup.outputs.webhook_url }}';
            
            const comment = `## ü™ù Webhook Testing Results
            
**Webhook Endpoint:** \`${webhookUrl}\`
**Test ID:** \`${{ steps.webhook-setup.outputs.webhook_id }}\`

### Available Endpoints:
- \`POST ${webhookUrl}/github\` - GitHub webhooks
- \`POST ${webhookUrl}/stripe\` - Stripe webhooks
- \`POST ${webhookUrl}/custom\` - Custom webhooks
- \`GET ${webhookUrl}/health\` - Health check

### Testing Instructions:
1. Use the staging webhook URL above for integration testing
2. No ngrok tunnel needed - this is a public endpoint!
3. Webhook logs available in DigitalOcean App Platform dashboard

### Postman Webhook Tests:
Import the webhook collection and set:
- \`webhook_url\`: ${webhookUrl}
- \`webhook_secret\`: (use staging secret from environment)`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });