name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version/tag to deploy (leave empty for latest)'
        required: false
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      target-env: ${{ steps.check.outputs.target-env }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Check Deployment Conditions
        id: check
        run: |
          # Manual trigger
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "target-env=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          # Auto deploy to staging on main push
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "target-env=staging" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: prepare
    if: |
      needs.prepare.outputs.should-deploy == 'true' &&
      (secrets.VERCEL_TOKEN != '' || vars.USE_VERCEL == 'true')
    environment:
      name: ${{ needs.prepare.outputs.target-env }}
      url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Vercel CLI
        run: npm install -g vercel
      
      - name: Pull Vercel Environment
        run: |
          vercel pull --yes --environment=${{ needs.prepare.outputs.target-env }} \
            --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Build Project
        run: |
          if [ "${{ needs.prepare.outputs.target-env }}" == "production" ]; then
            vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel build --token=${{ secrets.VERCEL_TOKEN }}
          fi
      
      - name: Deploy to Vercel
        id: deploy
        run: |
          if [ "${{ needs.prepare.outputs.target-env }}" == "production" ]; then
            url=$(vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }})
          else
            url=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }})
          fi
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "üöÄ Deployed to: $url"
      
      - name: Add Deployment Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `üöÄ Deployed to Vercel: ${{ steps.deploy.outputs.url }}`
            });

  deploy-digitalocean:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: prepare
    if: |
      needs.prepare.outputs.should-deploy == 'true' &&
      (secrets.DIGITALOCEAN_TOKEN != '' || vars.USE_DIGITALOCEAN == 'true')
    environment:
      name: ${{ needs.prepare.outputs.target-env }}
      url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}
      
      - name: Build Docker Image
        run: |
          docker build -t ${{ github.repository }}:${{ github.sha }} .
          docker tag ${{ github.repository }}:${{ github.sha }} \
            registry.digitalocean.com/${{ secrets.DO_REGISTRY }}/${{ github.event.repository.name }}:latest
      
      - name: Push to Registry
        run: |
          doctl registry login
          docker push registry.digitalocean.com/${{ secrets.DO_REGISTRY }}/${{ github.event.repository.name }}:latest
      
      - name: Deploy App
        id: deploy
        run: |
          if [ -n "${{ secrets.DO_APP_ID }}" ]; then
            doctl apps create-deployment ${{ secrets.DO_APP_ID }}
            url=$(doctl apps get ${{ secrets.DO_APP_ID }} --format LiveURL --no-header)
            echo "url=$url" >> $GITHUB_OUTPUT
          else
            echo "::warning::DigitalOcean App ID not configured"
          fi

  deploy-aws:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: prepare
    if: |
      needs.prepare.outputs.should-deploy == 'true' &&
      (secrets.AWS_ACCESS_KEY_ID != '' || vars.USE_AWS == 'true')
    environment:
      name: ${{ needs.prepare.outputs.target-env }}
      url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
      
      - name: Deploy to S3 (Static Sites)
        if: vars.DEPLOY_TYPE == 'static'
        run: |
          aws s3 sync ./dist s3://${{ secrets.S3_BUCKET }}/ --delete
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_ID }} \
            --paths "/*"
      
      - name: Deploy to ECS (Containers)
        if: vars.DEPLOY_TYPE == 'container'
        run: |
          # Build and push to ECR
          aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          docker build -t ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }} .
          docker push ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          
          # Update ECS service
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --force-new-deployment

  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-vercel, deploy-digitalocean, deploy-aws]
    if: always() && contains(needs.*.result, 'success')
    
    steps:
      - name: Wait for Deployment
        run: sleep 30
      
      - name: Health Check
        run: |
          # Get the deployed URL from whichever platform succeeded
          if [ -n "${{ needs.deploy-vercel.outputs.url }}" ]; then
            URL="${{ needs.deploy-vercel.outputs.url }}"
          elif [ -n "${{ needs.deploy-digitalocean.outputs.url }}" ]; then
            URL="${{ needs.deploy-digitalocean.outputs.url }}"
          elif [ -n "${{ needs.deploy-aws.outputs.url }}" ]; then
            URL="${{ needs.deploy-aws.outputs.url }}"
          else
            echo "No deployment URL found"
            exit 0
          fi
          
          # Perform health check
          response=$(curl -s -o /dev/null -w "%{http_code}" "$URL/health" || echo "000")
          if [ "$response" == "200" ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ö†Ô∏è Health check failed with status: $response"
          fi
      
      - name: Run Smoke Tests
        run: |
          echo "üî• Running smoke tests..."
          # Add actual smoke test commands here

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: health-check
    if: failure()
    
    steps:
      - name: Rollback Deployment
        run: |
          echo "üîÑ Rolling back deployment..."
          # Platform-specific rollback commands
          
      - name: Notify Team
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚ö†Ô∏è Deployment failed and was rolled back. Check the logs for details.`
            });