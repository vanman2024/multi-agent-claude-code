name: Auto-Approve Copilot Workflows

on:
  pull_request_target:
    types: [opened, reopened]

permissions:
  actions: write
  pull-requests: read

jobs:
  auto-approve:
    name: Auto-Approve Copilot Workflows
    runs-on: ubuntu-latest
    # Only run for Copilot PRs
    if: |
      github.event.pull_request.user.login == 'github-actions[bot]' ||
      github.event.pull_request.user.login == 'copilot[bot]' ||
      github.event.pull_request.user.login == 'github-copilot[bot]' ||
      startsWith(github.event.pull_request.head.ref, 'copilot/')
    
    steps:
      - name: Approve Workflow Runs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('PR created by:', context.payload.pull_request.user.login);
            console.log('Branch:', context.payload.pull_request.head.ref);
            
            // Get pending workflow runs for this PR
            const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              event: 'pull_request',
              status: 'action_required'
            });
            
            console.log(`Found ${runs.workflow_runs.length} workflow runs needing approval`);
            
            for (const run of runs.workflow_runs) {
              // Check if this run is for our PR
              if (run.pull_requests && run.pull_requests.some(pr => pr.number === context.payload.pull_request.number)) {
                console.log(`Approving workflow run ${run.id} for ${run.name}`);
                
                try {
                  await github.rest.actions.approveWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: run.id
                  });
                  console.log(`✅ Approved workflow run ${run.id}`);
                } catch (error) {
                  console.log(`Could not approve run ${run.id}:`, error.message);
                }
              }
            }
            
            // Also check for any pending deployments
            const { data: deployments } = await github.rest.actions.getPendingDeploymentsForRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            }).catch(() => ({ data: [] }));
            
            if (deployments.length > 0) {
              console.log(`Found ${deployments.length} pending deployments`);
              for (const deployment of deployments) {
                try {
                  await github.rest.actions.reviewPendingDeploymentsForRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: deployment.workflow_run.id,
                    environment_ids: deployment.environment.id,
                    state: 'approved',
                    comment: 'Auto-approved for Copilot PR'
                  });
                  console.log(`✅ Approved deployment to ${deployment.environment.name}`);
                } catch (error) {
                  console.log(`Could not approve deployment:`, error.message);
                }
              }
            }