name: PR Automation

on:
  issues:
    types: [opened, labeled]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  auto-create-pr:
    name: Auto Create Draft PR
    runs-on: ubuntu-latest
    # Only run for feature/bug issues, not infrastructure or documentation
    if: |
      github.event.action == 'opened' && 
      (contains(github.event.issue.labels.*.name, 'feature') || 
       contains(github.event.issue.labels.*.name, 'bug') ||
       contains(github.event.issue.labels.*.name, 'enhancement'))
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check for blocking issues
        id: check-blocking
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if any infrastructure issues are still open
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'infrastructure,blocking',
              state: 'open'
            });
            
            if (issues.length > 0) {
              console.log(`Found ${issues.length} blocking infrastructure issues`);
              core.setOutput('has_blockers', 'true');
              core.setOutput('blocker_count', issues.length);
              
              // Add comment to issue about blockers
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `⚠️ **Blocked by Infrastructure**\n\nThis issue cannot proceed until the following infrastructure issues are completed:\n\n${issues.map(i => `- #${i.number}: ${i.title}`).join('\n')}\n\nA draft PR will still be created for planning purposes, but development should not begin until blockers are resolved.`
              });
            } else {
              core.setOutput('has_blockers', 'false');
            }
      
      - name: Generate branch name
        id: branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const issueNumber = issue.number;
            const issueTitle = issue.title.toLowerCase()
              .replace(/[^a-z0-9]+/g, '-')
              .replace(/^-+|-+$/g, '')
              .substring(0, 50);
            
            // Determine branch prefix based on labels
            let prefix = 'feature';
            const labels = issue.labels.map(l => l.name);
            if (labels.includes('bug')) prefix = 'fix';
            else if (labels.includes('enhancement')) prefix = 'enhance';
            else if (labels.includes('refactor')) prefix = 'refactor';
            
            const branchName = `${prefix}/${issueNumber}-${issueTitle}`;
            console.log(`Branch name: ${branchName}`);
            core.setOutput('name', branchName);
            core.setOutput('issue_number', issueNumber);
      
      - name: Create branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create and push new branch
          git checkout -b "${{ steps.branch.outputs.name }}"
          
          # Create initial commit with issue reference
          echo "# Issue #${{ steps.branch.outputs.issue_number }}" > .issue-${{ steps.branch.outputs.issue_number }}.md
          echo "" >> .issue-${{ steps.branch.outputs.issue_number }}.md
          echo "This branch addresses issue #${{ steps.branch.outputs.issue_number }}: ${{ github.event.issue.title }}" >> .issue-${{ steps.branch.outputs.issue_number }}.md
          echo "" >> .issue-${{ steps.branch.outputs.issue_number }}.md
          echo "## Acceptance Criteria" >> .issue-${{ steps.branch.outputs.issue_number }}.md
          echo "${{ github.event.issue.body }}" >> .issue-${{ steps.branch.outputs.issue_number }}.md
          
          git add .issue-${{ steps.branch.outputs.issue_number }}.md
          git commit -m "🎯 Start work on #${{ steps.branch.outputs.issue_number }}: ${{ github.event.issue.title }}"
          git push origin "${{ steps.branch.outputs.name }}"
      
      - name: Create draft PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const hasBlockers = '${{ steps.check-blocking.outputs.has_blockers }}' === 'true';
            
            let prBody = `## 🎯 Addresses #${issue.number}\n\n`;
            prBody += `**Issue:** ${issue.title}\n\n`;
            
            if (hasBlockers) {
              prBody += `> ⚠️ **BLOCKED:** This PR is blocked by ${${{ steps.check-blocking.outputs.blocker_count }}} infrastructure issues. See issue comments for details.\n\n`;
            }
            
            prBody += `### Description\n${issue.body || 'No description provided'}\n\n`;
            prBody += `### Checklist\n`;
            prBody += `- [ ] Implementation complete\n`;
            prBody += `- [ ] Tests added/updated\n`;
            prBody += `- [ ] Documentation updated\n`;
            prBody += `- [ ] Lint and type checks pass\n`;
            prBody += `- [ ] PR ready for review\n\n`;
            prBody += `### Testing\n`;
            prBody += `Describe how to test these changes:\n`;
            prBody += `1. \n`;
            prBody += `2. \n`;
            prBody += `3. \n`;
            
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[Draft] ${issue.title}`,
              body: prBody,
              head: '${{ steps.branch.outputs.name }}',
              base: 'main',
              draft: true
            });
            
            console.log(`Created draft PR #${pr.data.number}`);
            
            // Link PR to issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `🚀 Draft PR created: #${pr.data.number}\n\nBranch: \`${{ steps.branch.outputs.name }}\`\n\n${hasBlockers ? '**Note:** This PR is blocked by infrastructure issues and should not be actively developed until they are resolved.' : 'Development can begin on this feature.'}`
            });
            
            // Add issue number to PR description for linking
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.data.number,
              body: prBody + `\n\n---\n_Auto-generated from issue #${issue.number}_`
            });

  update-pr-on-label:
    name: Update PR When Labels Change
    runs-on: ubuntu-latest
    if: github.event.action == 'labeled'
    
    steps:
      - name: Check if infrastructure completed
        if: github.event.label.name == 'infrastructure-complete'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Find PRs linked to this issue
            const issue = context.payload.issue;
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            // Find PR that references this issue
            const linkedPR = prs.find(pr => 
              pr.body && pr.body.includes(`#${issue.number}`)
            );
            
            if (linkedPR) {
              // Update PR to indicate it's unblocked
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: linkedPR.number,
                body: `✅ **Unblocked!** Infrastructure issue #${issue.number} has been completed. This PR can now proceed with development.`
              });
            }