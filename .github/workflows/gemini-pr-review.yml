name: '🔍 Gemini PR Review'

on:
  pull_request:
    types:
      - 'opened'
      - 'synchronize'
  issue_comment:
    types:
      - 'created'
  pull_request_review_comment:
    types:
      - 'created'

defaults:
  run:
    shell: 'bash'

permissions:
  contents: 'write'
  id-token: 'write'
  pull-requests: 'write'
  issues: 'write'

jobs:
  gemini-pr-review:
    if: |-
      (
        github.event_name == 'pull_request' &&
        github.event.pull_request.head.repo.fork == false
      ) || (
        github.event_name == 'issue_comment' &&
        github.event.issue.pull_request != null &&
        (
          contains(github.event.comment.body, '@gemini-cli /review') ||
          contains(github.event.comment.body, '@gemini /review')
        ) &&
        (
          github.event.sender.type == 'User' && (
            github.event.comment.author_association == 'OWNER' ||
            github.event.comment.author_association == 'MEMBER' ||
            github.event.comment.author_association == 'COLLABORATOR'
          )
        )
      ) || (
        github.event_name == 'pull_request_review_comment' &&
        (
          contains(github.event.comment.body, '@gemini-cli /review') ||
          contains(github.event.comment.body, '@gemini /review')
        ) &&
        (
          github.event.sender.type == 'User' && (
            github.event.comment.author_association == 'OWNER' ||
            github.event.comment.author_association == 'MEMBER' ||
            github.event.comment.author_association == 'COLLABORATOR'
          )
        )
      )
    timeout-minutes: 10
    runs-on: 'ubuntu-latest'

    steps:
      - name: 'Generate GitHub App Token'
        id: 'generate_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b'
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      - name: 'Get PR context'
        id: 'get_context'
        env:
          EVENT_NAME: '${{ github.event_name }}'
          EVENT_PAYLOAD: '${{ toJSON(github.event) }}'
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          REPOSITORY: '${{ github.repository }}'
        run: |-
          set -euo pipefail

          if [[ "${EVENT_NAME}" == "pull_request" ]]; then
            PR_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .pull_request.number)
          elif [[ "${EVENT_NAME}" == "issue_comment" ]]; then
            PR_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .issue.number)
          elif [[ "${EVENT_NAME}" == "pull_request_review_comment" ]]; then
            PR_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .pull_request.number)
          fi

          {
            echo "pr_number=${PR_NUMBER}"
            echo "comment_command=gh pr comment \"${PR_NUMBER}\" --body-file response.md"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Checkout PR branch'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683'
        with:
          token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          repository: '${{ github.repository }}'
          ref: 'refs/pull/${{ steps.get_context.outputs.pr_number }}/head'
          fetch-depth: 0

      - name: 'Run Gemini PR Review'
        uses: 'google-github-actions/run-gemini-cli@v0'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          REPOSITORY: '${{ github.repository }}'
          PR_NUMBER: '${{ steps.get_context.outputs.pr_number }}'
          COMMENT_COMMAND: '${{ steps.get_context.outputs.comment_command }}'
        with:
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          settings: |-
            {
              "maxSessionTurns": 20,
              "coreTools": [
                "run_shell_command(gh pr view)",
                "run_shell_command(gh pr diff)",
                "run_shell_command(gh pr comment)",
                "run_shell_command(cat)",
                "run_shell_command(head)",
                "run_shell_command(tail)",
                "run_shell_command(grep)",
                "run_shell_command(find)",
                "run_shell_command(git diff)",
                "run_shell_command(git log)",
                "write_file"
              ],
              "telemetry": {
                "enabled": false
              }
            }
          prompt: |-
            ## Role & Goal

            You are an AI code reviewer for GitHub pull requests. Your goal is to provide thorough, constructive code reviews.

            ## Context

            - **Repository**: '${{ github.repository }}'
            - **PR Number**: '${{ env.PR_NUMBER }}'
            - **Comment Command**: '${{ env.COMMENT_COMMAND }}'

            ## Instructions

            1. **Analyze the pull request** using `gh pr view` and `gh pr diff` commands
            2. **Review the code changes** for:
               - Code quality and best practices
               - Potential bugs or security issues
               - Performance considerations
               - Readability and maintainability
               - Test coverage (if applicable)
            3. **Write a comprehensive review** to `response.md` including:
               - Summary of changes
               - Positive feedback for good practices
               - Constructive suggestions for improvements
               - Any concerns or questions
            4. **Execute the comment command** to post your review

            ## Review Guidelines

            - Be constructive and helpful, not just critical
            - Explain the "why" behind your suggestions
            - Acknowledge good practices when you see them
            - Use markdown formatting for clear communication
            - Focus on significant issues rather than minor style preferences
            - If no issues are found, provide positive feedback and approval