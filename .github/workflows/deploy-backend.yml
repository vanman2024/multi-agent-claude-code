name: Deploy Backend to DigitalOcean

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - 'api/**'
      - 'server/**'
      - 'src/api/**'
      - 'package.json'
      - 'package-lock.json'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '!frontend/**'
      - '!client/**'
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'backend/**'
      - 'api/**'
      - 'server/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  DO_APP_ID: ${{ secrets.DO_APP_ID }}
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: ${{ github.repository }}

jobs:
  detect-backend:
    name: Detect Backend Configuration
    runs-on: ubuntu-latest
    outputs:
      type: ${{ steps.detect.outputs.type }}
      directory: ${{ steps.detect.outputs.directory }}
      deployment: ${{ steps.detect.outputs.deployment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Detect backend type and deployment
        id: detect
        run: |
          # Check for backend directory
          if [ -d "backend" ]; then
            echo "directory=backend" >> $GITHUB_OUTPUT
            cd backend
          elif [ -d "api" ]; then
            echo "directory=api" >> $GITHUB_OUTPUT
            cd api
          elif [ -d "server" ]; then
            echo "directory=server" >> $GITHUB_OUTPUT
            cd server
          else
            echo "directory=." >> $GITHUB_OUTPUT
          fi
          
          # Detect deployment type
          if [ -f "Dockerfile" ]; then
            echo "deployment=docker" >> $GITHUB_OUTPUT
          elif [ -f "app.yaml" ]; then
            echo "deployment=app-platform" >> $GITHUB_OUTPUT
          elif [ -f ".do/app.yaml" ]; then
            echo "deployment=app-platform" >> $GITHUB_OUTPUT
          else
            echo "deployment=droplet" >> $GITHUB_OUTPUT
          fi
          
          # Detect backend type
          if [ -f "package.json" ]; then
            if grep -q '"express"' package.json; then
              echo "type=express" >> $GITHUB_OUTPUT
            elif grep -q '"fastify"' package.json; then
              echo "type=fastify" >> $GITHUB_OUTPUT
            elif grep -q '"@nestjs/core"' package.json; then
              echo "type=nestjs" >> $GITHUB_OUTPUT
            else
              echo "type=node" >> $GITHUB_OUTPUT
            fi
          elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
            echo "type=python" >> $GITHUB_OUTPUT
          elif [ -f "go.mod" ]; then
            echo "type=go" >> $GITHUB_OUTPUT
          else
            echo "type=unknown" >> $GITHUB_OUTPUT
          fi

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: detect-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup environment
        uses: actions/setup-node@v4
        with:
          node-version: '18'
        if: needs.detect-backend.outputs.type == 'express' || needs.detect-backend.outputs.type == 'node' || needs.detect-backend.outputs.type == 'nestjs' || needs.detect-backend.outputs.type == 'fastify'
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
        if: needs.detect-backend.outputs.type == 'python'
        
      - name: Install dependencies
        run: |
          if [ "${{ needs.detect-backend.outputs.type }}" = "node" ] || [ "${{ needs.detect-backend.outputs.type }}" = "express" ] || [ "${{ needs.detect-backend.outputs.type }}" = "nestjs" ] || [ "${{ needs.detect-backend.outputs.type }}" = "fastify" ]; then
            npm ci
          elif [ "${{ needs.detect-backend.outputs.type }}" = "python" ]; then
            pip install -r requirements.txt
          fi
        working-directory: ${{ needs.detect-backend.outputs.directory }}
        
      - name: Run tests
        run: |
          if [ "${{ needs.detect-backend.outputs.type }}" = "node" ] || [ "${{ needs.detect-backend.outputs.type }}" = "express" ] || [ "${{ needs.detect-backend.outputs.type }}" = "nestjs" ] || [ "${{ needs.detect-backend.outputs.type }}" = "fastify" ]; then
            npm test || echo "No tests configured"
          elif [ "${{ needs.detect-backend.outputs.type }}" = "python" ]; then
            pytest || python -m unittest || echo "No tests configured"
          fi
        working-directory: ${{ needs.detect-backend.outputs.directory }}
        continue-on-error: true

  deploy-staging:
    name: Deploy to DigitalOcean Staging
    runs-on: ubuntu-latest
    needs: [detect-backend, test-backend]
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      - name: Deploy to App Platform (Staging)
        if: needs.detect-backend.outputs.deployment == 'app-platform'
        id: deploy-app
        run: |
          # Create or update app spec for staging
          cat > .do/app-staging.yaml <<EOF
          name: ${{ github.event.repository.name }}-staging
          region: nyc
          services:
          - name: api
            environment_slug: node-js
            github:
              repo: ${{ github.repository }}
              branch: ${{ github.head_ref || github.ref_name }}
              deploy_on_push: true
            source_dir: ${{ needs.detect-backend.outputs.directory }}
            http_port: 3000
            instance_count: 1
            instance_size_slug: basic-xxs
            routes:
            - path: /
            envs:
            - key: NODE_ENV
              value: staging
            - key: DATABASE_URL
              value: \${db.DATABASE_URL}
            - key: FRONTEND_URL
              value: ${{ secrets.STAGING_FRONTEND_URL }}
          databases:
          - name: db
            engine: PG
            version: "15"
            size: db-s-dev-database
          EOF
          
          # Deploy or update the app
          if doctl apps list --format Name | grep -q "${{ github.event.repository.name }}-staging"; then
            APP_ID=$(doctl apps list --format Name,ID | grep "${{ github.event.repository.name }}-staging" | awk '{print $2}')
            doctl apps update $APP_ID --spec .do/app-staging.yaml
          else
            doctl apps create --spec .do/app-staging.yaml
          fi
          
          # Get the app URL
          APP_URL=$(doctl apps list --format Name,DefaultIngress | grep "${{ github.event.repository.name }}-staging" | awk '{print $2}')
          echo "url=https://$APP_URL" >> $GITHUB_OUTPUT
          
      - name: Build and Deploy Docker Image (Staging)
        if: needs.detect-backend.outputs.deployment == 'docker'
        run: |
          # Login to DigitalOcean Container Registry
          doctl registry login
          
          # Build and tag image
          docker build -t ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }} .
          docker tag ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }} \
                     ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:staging-latest
          
          # Push image
          docker push ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:staging-latest
          
          # Update App Platform to use new image
          doctl apps update ${{ secrets.DO_STAGING_APP_ID }} \
            --spec .do/app.yaml
        working-directory: ${{ needs.detect-backend.outputs.directory }}
        
      - name: Run Database Migrations
        if: success()
        run: |
          echo "Running database migrations..."
          # Add migration commands here
        continue-on-error: true
        
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const url = '${{ steps.deploy-app.outputs.url }}' || 'Deployment in progress';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## üöÄ Backend Deployed to Staging!
              
**URL:** ${url}
**Environment:** Staging
**Type:** ${{ needs.detect-backend.outputs.type }}
**Deployment:** ${{ needs.detect-backend.outputs.deployment }}
              
### Staging Features:
- üîÑ Isolated test environment
- üóÑÔ∏è Separate staging database
- üìä Full API logging enabled
- üîí Test webhook endpoints available

### API Testing:
- Postman Collection: [Run in Postman](https://app.getpostman.com/run-collection/${{ secrets.POSTMAN_COLLECTION_ID }})
- Swagger Docs: ${url}/api-docs
- Health Check: ${url}/health

### Webhook Testing:
Use this staging URL for webhook testing:
\`${url}/webhooks\`
              
No ngrok needed! This is a real public endpoint.`
            });

  deploy-production:
    name: Deploy to DigitalOcean Production
    runs-on: ubuntu-latest
    needs: [detect-backend, test-backend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      - name: Deploy to App Platform (Production)
        if: needs.detect-backend.outputs.deployment == 'app-platform'
        id: deploy-app-prod
        run: |
          # Update production app
          doctl apps update ${{ secrets.DO_APP_ID }} \
            --spec .do/app.yaml
          
          # Get the app URL
          APP_URL=$(doctl apps get ${{ secrets.DO_APP_ID }} --format DefaultIngress --no-header)
          echo "url=https://$APP_URL" >> $GITHUB_OUTPUT
          
      - name: Build and Deploy Docker Image (Production)
        if: needs.detect-backend.outputs.deployment == 'docker'
        run: |
          # Login to registry
          doctl registry login
          
          # Build production image
          docker build -t ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
                     ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest
          
          # Push image
          docker push ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ secrets.DO_REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest
          
          # Update app to use new image
          doctl apps update ${{ secrets.DO_APP_ID }} \
            --spec .do/app.yaml
        working-directory: ${{ needs.detect-backend.outputs.directory }}
        
      - name: Run Production Migrations
        if: success()
        run: |
          echo "Running production database migrations..."
          # Add production migration commands
        
      - name: Health Check
        run: |
          URL="${{ steps.deploy-app-prod.outputs.url }}"
          for i in {1..30}; do
            if curl -f "${URL}/health" > /dev/null 2>&1; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Waiting for service to be healthy... (attempt $i/30)"
            sleep 10
          done
          echo "Health check failed!"
          exit 1
        
      - name: Create Deployment Record
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const url = '${{ steps.deploy-app-prod.outputs.url }}';
            
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production-backend',
              production_environment: true,
              auto_merge: false,
              required_contexts: [],
              description: 'Backend production deployment to DigitalOcean'
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: url,
              description: 'Deployed to DigitalOcean'
            });