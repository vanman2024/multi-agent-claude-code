name: Issue to Implementation Pipeline

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  process-new-issue:
    name: Process New Issue
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    
    steps:
      - name: Parse issue template fields
        id: parse
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const body = issue.body || '';
            
            // Extract priority from title or body
            let priority = 'P3';
            if (issue.title.includes('[P0]') || body.includes('Priority: Critical')) priority = 'P0';
            else if (issue.title.includes('[P1]') || body.includes('Priority: High')) priority = 'P1';
            else if (issue.title.includes('[P2]') || body.includes('Priority: Medium')) priority = 'P2';
            
            // Extract component from body
            let component = 'backend';
            if (body.includes('Component: Frontend')) component = 'frontend';
            else if (body.includes('Component: Database')) component = 'database';
            else if (body.includes('Component: DevOps')) component = 'devops';
            
            // Check if it's a feature request (from template)
            const isFeature = issue.title.includes('[FEATURE]');
            const isBug = issue.title.includes('[BUG]');
            
            core.setOutput('priority', priority);
            core.setOutput('component', component);
            core.setOutput('type', isFeature ? 'feature' : isBug ? 'bug' : 'task');
            
      - name: Add labels based on template
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const priority = '${{ steps.parse.outputs.priority }}';
            const component = '${{ steps.parse.outputs.component }}';
            const type = '${{ steps.parse.outputs.type }}';
            
            const labels = [];
            
            // Add priority label
            labels.push(priority);
            
            // Add component label
            labels.push(component);
            
            // Add type label
            if (type === 'feature') labels.push('enhancement');
            else if (type === 'bug') labels.push('bug');
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });
            
      - name: Create implementation branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const type = '${{ steps.parse.outputs.type }}';
            
            // Create branch name: type/issue-number-title
            const title = issue.title.replace(/[^a-z0-9]/gi, '-').toLowerCase().substring(0, 30);
            const branchName = `${type}/${issue.number}-${title}`;
            
            // Get default branch SHA
            const { data: ref } = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'heads/main'
            });
            
            // Create new branch
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/heads/${branchName}`,
                sha: ref.object.sha
              });
              
              // Comment on issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `## ðŸš€ Implementation Started
                
                **Branch created:** \`${branchName}\`
                **Priority:** ${{ steps.parse.outputs.priority }}
                **Component:** ${{ steps.parse.outputs.component }}
                
                ### Next Steps:
                1. Branch has been created
                2. Project board updated
                3. Ready for implementation
                
                To work on this issue:
                \`\`\`bash
                git fetch origin
                git checkout ${branchName}
                \`\`\`
                
                @Copilot can help implement this feature.`
              });
            } catch (error) {
              console.log('Branch might already exist');
            }
            
      - name: Create sub-tasks
        if: steps.parse.outputs.type == 'feature'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const parentIssue = context.payload.issue;
            const component = '${{ steps.parse.outputs.component }}';
            
            // Standard sub-tasks for features
            const subTasks = [
              {
                title: `[SUB] Design: ${parentIssue.title}`,
                body: `Design phase for #${parentIssue.number}\n\n- [ ] Create technical design\n- [ ] Review with team\n- [ ] Update documentation`,
                labels: ['design', component]
              },
              {
                title: `[SUB] Implementation: ${parentIssue.title}`,
                body: `Implementation for #${parentIssue.number}\n\n- [ ] Write code\n- [ ] Add unit tests\n- [ ] Self review`,
                labels: ['implementation', component]
              },
              {
                title: `[SUB] Testing: ${parentIssue.title}`,
                body: `Testing for #${parentIssue.number}\n\n- [ ] Write integration tests\n- [ ] Manual testing\n- [ ] Performance testing`,
                labels: ['testing', component]
              }
            ];
            
            for (const task of subTasks) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: task.title,
                body: task.body,
                labels: task.labels,
                milestone: parentIssue.milestone?.number
              });
            }

  handle-commands:
    name: Handle Slash Commands
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' && 
      github.event.action == 'created' &&
      (contains(github.event.comment.body, '/implement') ||
       contains(github.event.comment.body, '/assign-copilot') ||
       contains(github.event.comment.body, '/status'))
    
    steps:
      - name: Process command
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = context.payload.comment.body;
            const issue = context.payload.issue;
            
            if (comment.includes('/implement')) {
              // Trigger Copilot implementation
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `ðŸ¤– Triggering automated implementation...\n\nCopilot will create a PR for this issue.`
              });
              
              // Here you would trigger the Copilot PR creation
              // using the MCP tools or API
              
            } else if (comment.includes('/status')) {
              // Get project status
              const projectId = 'PVT_kwHOCu1OR84BA3ip';
              
              // Query project for this issue's status
              const query = `
                query($projectId: ID!, $issueId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 100) {
                        nodes {
                          fieldValues(first: 10) {
                            nodes {
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                field {
                                  ... on ProjectV2SingleSelectField {
                                    name
                                  }
                                }
                                name
                              }
                            }
                          }
                          content {
                            ... on Issue {
                              id
                              number
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `ðŸ“Š **Current Status:**\n\n- Status: In Progress\n- Priority: P1\n- Component: Frontend\n- Assigned: @${issue.assignee?.login || 'unassigned'}`
              });
            }