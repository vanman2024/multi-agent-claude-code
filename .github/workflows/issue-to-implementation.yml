name: Issue to Implementation Pipeline

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  process-new-issue:
    name: Process New Issue
    runs-on: ubuntu-latest
    # DISABLED: Running manual workflow for now
    if: false  # Was: github.event.action == 'opened'
    
    steps:
      # Wait for auto-assign and project-automation workflows to complete (race condition mitigation)
      - name: Wait for other workflows
        run: sleep 20
        
      - name: Parse issue template fields
        id: parse
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const body = issue.body || '';
            
            // Extract priority from body (matches **Priority:** P1 or Priority: P1)
            let priority = 'P3';
            const priorityMatch = body.match(/\*?\*?Priority:\*?\*?\s*(P[0-3])/i);
            if (priorityMatch) priority = priorityMatch[1];
            
            // Extract component from body (matches **Component:** Auth or Component: Auth)
            let component = 'Backend';
            const componentMatch = body.match(/\*?\*?Component:\*?\*?\s*([A-Za-z\s]+)/i);
            if (componentMatch) {
              component = componentMatch[1].trim();
              // Map common variations to standard names
              if (component.toLowerCase() === 'frontend' || component.toLowerCase() === 'ui') component = 'Frontend';
              else if (component.toLowerCase() === 'backend' || component.toLowerCase() === 'api') component = 'Backend';
              else if (component.toLowerCase() === 'database' || component.toLowerCase() === 'db') component = 'Database';
              else if (component.toLowerCase() === 'auth') component = 'Auth';
            }
            
            // Check labels to determine issue type
            const labels = issue.labels || [];
            const labelNames = labels.map(l => l.name);
            
            let issueType = 'task';
            if (labelNames.includes('feature')) issueType = 'feature';
            else if (labelNames.includes('enhancement')) issueType = 'feature';
            else if (labelNames.includes('bug')) issueType = 'bug';
            else if (labelNames.includes('refactor')) issueType = 'refactor';
            
            // Parse additional metadata from issue body
            let sprintPoints = 3; // default
            let sprintGoal = 'Features'; // default
            let complexity = 'M'; // default
            
            // Look for Points in body
            const pointsMatch = body.match(/\*?\*?Points:\*?\*?\s*(\d+)/i);
            if (pointsMatch) sprintPoints = parseInt(pointsMatch[1]);
            
            // Look for Complexity/Size in body
            const complexityMatch = body.match(/\*?\*?(?:Complexity|Size):\*?\*?\s*(XS|S|M|L|XL)/i);
            if (complexityMatch) complexity = complexityMatch[1].toUpperCase();
            
            // Look for Goal in body
            const goalMatch = body.match(/\*?\*?Goal:\*?\*?\s*(MVP|User Experience|Performance|Tech Debt|Features)/i);
            if (goalMatch) sprintGoal = goalMatch[1];
            
            // Look for Milestone in body
            let milestone = null;
            const milestoneMatch = body.match(/\*?\*?Milestone:\*?\*?\s*([^\n\*]+)/i);
            if (milestoneMatch) {
              milestone = milestoneMatch[1].trim();
            }
            // Default milestone - now using descriptive names instead of versions
            if (!milestone) {
              // Suggest milestone based on issue type and priority
              if (issueType === 'bug') {
                milestone = 'Bug Fixes';
              } else if (priority === 'P0') {
                milestone = 'Critical Features';
              } else if (priority === 'P1') {
                milestone = 'Core Features';  
              } else if (priority === 'P2') {
                milestone = 'Enhancements';
              } else {
                milestone = 'Backlog';
              }
            }
            
            core.setOutput('priority', priority);
            core.setOutput('component', component);
            core.setOutput('type', issueType);
            core.setOutput('sprintPoints', sprintPoints);
            core.setOutput('sprintGoal', sprintGoal);
            core.setOutput('complexity', complexity);
            core.setOutput('milestone', milestone);
            
      - name: Set project fields
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const priority = '${{ steps.parse.outputs.priority }}';
            const component = '${{ steps.parse.outputs.component }}';
            const type = '${{ steps.parse.outputs.type }}';
            const sprintPoints = '${{ steps.parse.outputs.sprintPoints }}';
            const sprintGoal = '${{ steps.parse.outputs.sprintGoal }}';
            
            console.log(`Setting project fields - Priority: ${priority}, Component: ${component}, Type: ${type}`);
            
            // Project fields will be set by project-automation.yml workflow
            
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Check for blocking issues
        id: check-blocking
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Check if any infrastructure issues are still open
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'infrastructure,blocking',
              state: 'open'
            });
            
            const hasBlockers = issues.length > 0;
            const currentIssue = context.payload.issue;
            const isInfrastructure = currentIssue.labels.some(l => 
              l.name === 'infrastructure' || l.name === 'blocking'
            );
            
            core.setOutput('has_blockers', hasBlockers);
            core.setOutput('blocker_count', issues.length);
            core.setOutput('is_infrastructure', isInfrastructure);
            
            if (hasBlockers && !isInfrastructure) {
              console.log(`Found ${issues.length} blocking infrastructure issues`);
              
              // Add blocked label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: currentIssue.number,
                labels: ['blocked']
              });
              
              // Add comment about blockers
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: currentIssue.number,
                body: `‚ö†Ô∏è **Development Blocked**\n\nThis issue cannot proceed until infrastructure is complete:\n\n${issues.map(i => `- #${i.number}: ${i.title}`).join('\n')}\n\nA branch and draft PR will be created for planning purposes.`
              });
            }
            
      # DISABLED: Branch/PR creation moved to /work command (Track 1 workflow)
      # Issues should NOT create branches automatically
      - name: Skip automatic branch creation
        run: |
          echo "Branch and PR creation happens via /work command, not automatically"
          echo "This prevents unused branches from accumulating"
          
      - name: Create implementation branch and draft PR
        if: false  # DISABLED - keeping code for reference
        env:
          GH_TOKEN: ${{ secrets.PROJECT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER=${{ github.event.issue.number }}
          # Get issue type from parsed output, default to feature if has feature label
          ISSUE_TYPE="${{ steps.parse.outputs.type }}"
          if [ -z "$ISSUE_TYPE" ] || [ "$ISSUE_TYPE" == "task" ]; then
            # Check if issue has feature label
            HAS_FEATURE=$(gh issue view $ISSUE_NUMBER --json labels --jq '.labels[] | select(.name == "feature")' | wc -l)
            if [ "$HAS_FEATURE" -gt 0 ]; then
              ISSUE_TYPE="feature"
            fi
          fi
          ISSUE_TITLE=$(echo "${{ github.event.issue.title }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | cut -c1-30)
          BRANCH_NAME="${ISSUE_TYPE}/${ISSUE_NUMBER}-${ISSUE_TITLE}"
          
          # Assign milestone to the issue
          MILESTONE="${{ steps.parse.outputs.milestone }}"
          if [ ! -z "$MILESTONE" ]; then
            gh issue edit ${ISSUE_NUMBER} --milestone "$MILESTONE" || echo "Could not set milestone: $MILESTONE"
          fi
          
          # Create and link branch using gh CLI
          gh issue develop ${ISSUE_NUMBER} --name ${BRANCH_NAME} --base main
          
          echo "Branch created and linked: ${BRANCH_NAME}"
          
          # Create draft PR immediately
          HAS_BLOCKERS="${{ steps.check-blocking.outputs.has_blockers }}"
          BLOCKER_COUNT="${{ steps.check-blocking.outputs.blocker_count }}"
          
          PR_BODY="## üéØ Addresses #${ISSUE_NUMBER}

          **Issue:** ${{ github.event.issue.title }}
          "
          
          if [ "$HAS_BLOCKERS" = "true" ]; then
            PR_BODY="${PR_BODY}
          > ‚ö†Ô∏è **BLOCKED:** This PR is blocked by ${BLOCKER_COUNT} infrastructure issues. See issue comments for details.
          "
          fi
          
          PR_BODY="${PR_BODY}
          ### Description
          ${{ github.event.issue.body }}
          
          ### Checklist
          - [ ] Implementation complete
          - [ ] Tests added/updated
          - [ ] Documentation updated
          - [ ] Lint and type checks pass
          - [ ] PR ready for review
          
          ### Testing
          Describe how to test these changes:
          1. 
          2. 
          3. 
          
          ---
          _Auto-generated from issue #${ISSUE_NUMBER}_"
          
          # Create the draft PR
          PR_URL=$(gh pr create \
            --title "[Draft] ${{ github.event.issue.title }}" \
            --body "$PR_BODY" \
            --head "${BRANCH_NAME}" \
            --base main \
            --draft \
            --assignee @me)
          
          PR_NUMBER=$(echo $PR_URL | grep -oE '[0-9]+$')
          
          # Comment on the issue with branch and PR info
          gh issue comment ${ISSUE_NUMBER} --body "## üöÄ Development Setup Complete
          
          **Branch:** \`${BRANCH_NAME}\`
          **Draft PR:** #${PR_NUMBER}
          **Type:** ${ISSUE_TYPE}
          
          The branch and draft PR have been created. Check the **Development** section ‚Üí
          
          ### To start working:
          \`\`\`bash
          gh issue develop ${ISSUE_NUMBER} --checkout
          # or
          git fetch origin
          git checkout ${BRANCH_NAME}
          \`\`\`
          
          $(if [ "$HAS_BLOCKERS" = "true" ]; then echo "‚ö†Ô∏è **Note:** Development is blocked by infrastructure issues."; fi)"
          
          # Assign the user to the issue
          gh issue edit ${ISSUE_NUMBER} --add-assignee @me
          
          # Note: Copilot assignment is handled by Claude Code agents via MCP tools
          # GitHub workflows cannot directly assign the github-copilot user
          echo "Issue assigned to creator. Copilot assignment will be handled by Claude Code agents."
            
      - name: Add task checklist to issue
        if: steps.parse.outputs.type == 'feature'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const parentIssue = context.payload.issue;
            const component = '${{ steps.parse.outputs.component }}';
            
            // Add a task checklist as a comment (or update issue body)
            const taskChecklist = `## üìã Implementation Tasks

            ### Phase 1: Design
            - [ ] Create technical design document
            - [ ] Review architecture with team
            - [ ] Update project documentation
            
            ### Phase 2: Implementation  
            - [ ] Implement core functionality
            - [ ] Add unit tests
            - [ ] Perform self code review
            
            ### Phase 3: Testing
            - [ ] Write integration tests
            - [ ] Perform manual testing
            - [ ] Run performance tests
            - [ ] Fix any issues found
            
            ### Phase 4: Documentation
            - [ ] Update API documentation
            - [ ] Add user guide
            - [ ] Update README if needed
            
            ### Phase 5: Review & Deploy
            - [ ] Create pull request
            - [ ] Address review feedback
            - [ ] Merge to main
            - [ ] Deploy to staging
            - [ ] Verify in production`;
            
            // Add the checklist as a comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parentIssue.number,
              body: taskChecklist
            });
            
            console.log('Added task checklist to issue #' + parentIssue.number);

  handle-commands:
    name: Handle Slash Commands
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' && 
      github.event.action == 'created' &&
      (contains(github.event.comment.body, '/implement') ||
       contains(github.event.comment.body, '/assign-copilot') ||
       contains(github.event.comment.body, '/status'))
    
    steps:
      - name: Process command
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = context.payload.comment.body;
            const issue = context.payload.issue;
            
            if (comment.includes('/implement')) {
              // Trigger Copilot implementation
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `ü§ñ Triggering automated implementation...\n\nCopilot will create a PR for this issue.`
              });
              
              // Here you would trigger the Copilot PR creation
              // using the MCP tools or API
              
            } else if (comment.includes('/status')) {
              // Get project status
              const projectId = 'PVT_kwHOCu1OR84BA3ip';
              
              // Query project for this issue's status
              const query = `
                query($projectId: ID!, $issueId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 100) {
                        nodes {
                          fieldValues(first: 10) {
                            nodes {
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                field {
                                  ... on ProjectV2SingleSelectField {
                                    name
                                  }
                                }
                                name
                              }
                            }
                          }
                          content {
                            ... on Issue {
                              id
                              number
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `üìä **Current Status:**\n\n- Status: In Progress\n- Priority: P1\n- Component: Frontend\n- Assigned: @${issue.assignee?.login || 'unassigned'}`
              });
            }