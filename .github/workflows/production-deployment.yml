name: Production Deployment

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '.claude/**'
      - 'docs/**'
      - 'templates/**'
  workflow_dispatch: # Allow manual triggering

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
        if: hashFiles('package.json') != ''
      
      - name: Install dependencies
        run: npm ci
        if: hashFiles('package.json') != ''
      
      - name: Run linting
        run: npm run lint
        if: hashFiles('package.json') != ''
      
      - name: Run type checking
        run: npm run typecheck
        if: hashFiles('package.json') != ''
      
      - name: Run tests
        run: npm test
        if: hashFiles('package.json') != ''
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
        if: hashFiles('requirements.txt') != ''
      
      - name: Install Python dependencies
        run: pip install -r requirements.txt
        if: hashFiles('requirements.txt') != ''
      
      - name: Run Python tests
        run: pytest
        if: hashFiles('requirements.txt') != ''
      
      - name: Build check
        run: npm run build
        if: hashFiles('package.json') != ''

  production-deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Deploy to Vercel Production
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Production deployed to: $DEPLOYMENT_URL"
      
      - name: Create GitHub Deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              production_environment: true,
              auto_merge: false,
              required_contexts: [],
              description: 'Production deployment to Vercel'
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.url }}',
              description: 'Deployment successful'
            });
      
      - name: Notify Success
        if: success()
        run: |
          echo "✅ Production deployment successful!"
          echo "URL: ${{ steps.deploy.outputs.url }}"
      
      - name: Notify Failure
        if: failure()
        run: |
          echo "❌ Production deployment failed!"
          echo "Check the logs for details."