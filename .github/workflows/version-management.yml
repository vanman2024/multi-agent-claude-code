name: Automatic Version Management

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  checks: read
  pull-requests: write

jobs:
  version-management:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install semantic-release dependencies
      run: |
        npm install --no-save \
          semantic-release \
          @semantic-release/changelog \
          @semantic-release/git \
          @semantic-release/github \
          @semantic-release/exec

    - name: Update VERSION file and create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create semantic-release config that includes component versions
        cat > .releaserc.json << 'EOF'
        {
          "branches": ["main"],
          "plugins": [
            "@semantic-release/commit-analyzer",
            "@semantic-release/release-notes-generator",
            [
              "@semantic-release/exec",
              {
                "prepareCmd": "node -e \"const fs = require('fs'); const devopsVersion = fs.existsSync('devops/VERSION') ? JSON.parse(fs.readFileSync('devops/VERSION', 'utf8')).version || 'unknown' : 'unknown'; const agentswarmVersion = fs.existsSync('agentswarm/VERSION') ? JSON.parse(fs.readFileSync('agentswarm/VERSION', 'utf8')).version || 'unknown' : 'unknown'; const versionData = { version: 'v${nextRelease.version}', commit: process.env.GITHUB_SHA, build_date: new Date().toISOString(), build_type: 'production', components: { devops: devopsVersion, agentswarm: agentswarmVersion } }; fs.writeFileSync('VERSION', JSON.stringify(versionData, null, 2));\""
              }
            ],
            [
              "@semantic-release/git",
              {
                "assets": ["VERSION"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }
            ],
            "@semantic-release/github"
          ]
        }
        EOF
        
        # Run semantic-release
        npx semantic-release
      continue-on-error: true

    - name: Sync component versions in template VERSION file
      if: always()
      run: |
        # Read current component versions and update template VERSION file
        CURRENT_VERSION=$(cat VERSION | jq -r .version 2>/dev/null || echo "v3.8.0")
        CURRENT_COMMIT=$(git rev-parse HEAD)
        CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
        
        # Read actual component versions
        DEVOPS_VERSION=$(cat devops/VERSION | jq -r .version 2>/dev/null || echo "unknown")
        AGENTSWARM_VERSION=$(cat agentswarm/VERSION | jq -r .version 2>/dev/null || echo "unknown")
        
        echo "🔍 Current template VERSION component versions:"
        echo "   DevOps: $(cat VERSION | jq -r .components.devops 2>/dev/null || echo 'unknown')"
        echo "   AgentSwarm: $(cat VERSION | jq -r .components.agentswarm 2>/dev/null || echo 'unknown')"
        echo "🆕 Actual component versions found:"
        echo "   DevOps: $DEVOPS_VERSION"
        echo "   AgentSwarm: $AGENTSWARM_VERSION"
        
        # Create updated VERSION file with current component versions
        jq -n \
          --arg version "$CURRENT_VERSION" \
          --arg commit "$CURRENT_COMMIT" \
          --arg build_date "$CURRENT_DATE" \
          --arg devops "$DEVOPS_VERSION" \
          --arg agentswarm "$AGENTSWARM_VERSION" \
          '{
            version: $version,
            commit: $commit,
            build_date: $build_date,
            build_type: "production",
            components: {
              devops: $devops,
              agentswarm: $agentswarm
            }
          }' > VERSION
        
        # Check if VERSION file changed and commit if needed
        if ! git diff --exit-code VERSION > /dev/null; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add VERSION
          git commit -m "chore: sync component versions - devops:$DEVOPS_VERSION agentswarm:$AGENTSWARM_VERSION [skip ci]"
          git push
          echo "✅ Component versions synced and committed"
        else
          echo "✅ Component versions already in sync"
        fi

    - name: Template version management complete
      if: always()
      run: |
        echo "✅ Template version management workflow completed"
        echo "📦 Current template version: $(cat VERSION | jq -r .version 2>/dev/null || echo 'unknown')"
        echo "🔧 DevOps component: $(cat devops/VERSION | jq -r .version 2>/dev/null || echo 'unknown')"
        echo "🤖 AgentSwarm component: $(cat agentswarm/VERSION | jq -r .version 2>/dev/null || echo 'unknown')"
        echo ""
        echo "🚀 Template ready for project sync operations"
        echo "📖 Users can now create new projects with:"
        echo "   ./sync-project-template.sh --create-repo"

