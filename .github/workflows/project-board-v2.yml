name: Project Board V2 Automation

on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened, ready_for_review, closed]

env:
  PROJECT_ID: PVT_kwHOCu1OR84BA3ip  # Multi-Agent Claude Code Development

jobs:
  add-to-project:
    name: Add to project
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    outputs:
      item-id: ${{ steps.get-item-id.outputs.item-id }}
    steps:
      - name: Add to project using GraphQL
        id: add-to-project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const mutation = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemByContentId(input: {
                  projectId: $projectId
                  contentId: $contentId
                }) {
                  item {
                    id
                  }
                }
              }
            `;
            
            const contentId = context.payload.issue?.node_id || context.payload.pull_request?.node_id;
            if (!contentId) {
              core.setFailed('No issue or PR found in context');
              return;
            }
            
            try {
              const result = await github.graphql(mutation, {
                projectId: process.env.PROJECT_ID,
                contentId: contentId
              });
              
              console.log(`Added item to project: ${result.addProjectV2ItemByContentId.item.id}`);
              core.setOutput('item-id', result.addProjectV2ItemByContentId.item.id);
            } catch (error) {
              console.log(`Error adding to project: ${error.message}`);
              core.setFailed(`Failed to add to project: ${error.message}`);
            }

      - name: Get item ID for future steps  
        id: get-item-id
        run: echo "item-id=${{ steps.add-to-project.outputs.item-id }}" >> $GITHUB_OUTPUT
          
  update-project-fields:
    name: Update Project Fields
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    needs: add-to-project
    
    steps:
      - name: Set priority and component fields
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const itemId = '${{ needs.add-to-project.outputs.item-id }}';
            if (!itemId || itemId === 'undefined') {
              console.log('No item ID available, skipping field updates');
              return;
            }
            
            const title = context.payload.issue?.title || context.payload.pull_request?.title || '';
            const body = context.payload.issue?.body || context.payload.pull_request?.body || '';
            
            console.log(`Setting fields for item: ${itemId}`);
            console.log(`Title: ${title}`);
            console.log(`Body contains "Backend": ${body.toLowerCase().includes('backend')}`);
            console.log(`Title contains "[P0]": ${title.includes('[P0]')}`);
            
            // Set initial status to Todo
            try {
              const statusMutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { text: $value }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              
              // For now, just log that we would set status to Todo
              // In a real implementation, you'd need the actual field IDs
              console.log('Would set status to: Todo');
              console.log('Would set priority to: P0 (from title)');
              console.log('Would set component to: Backend (from body)');
              
            } catch (error) {
              console.log(`Error updating fields: ${error.message}`);
              // Don't fail the whole workflow if field updates fail
            }
            
  create-development-branch:
    name: Create Development Branch
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Create branch for issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            if (!issue) return;
            
            // Create branch name from issue
            const title = issue.title.replace(/\[.*?\]/g, '').trim().toLowerCase()
              .replace(/[^a-z0-9\s-]/g, '').replace(/\s+/g, '-').substring(0, 30);
            const branchName = `fix/${issue.number}-${title}`;
            
            try {
              // Get default branch
              const { data: repo } = await github.rest.repos.get({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              const { data: ref } = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${repo.default_branch}`
              });
              
              // Create new branch
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/heads/${branchName}`,
                sha: ref.object.sha
              });
              
              console.log(`Created branch: ${branchName}`);
              
              // Add comment to issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `## ðŸŒ¿ Development branch created\n\n**Branch:** \`${branchName}\`\n\nTo start working on this issue:\n\`\`\`bash\ngit fetch origin\ngit checkout ${branchName}\n\`\`\`\n\nWhen ready, create a PR to close this issue.`
              });
              
            } catch (error) {
              console.log(`Branch creation failed: ${error.message}`);
              if (!error.message.includes('already exists')) {
                throw error;
              }
            }