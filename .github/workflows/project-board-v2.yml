name: Project Board V2 Automation

on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened, ready_for_review, closed]

jobs:
  add-to-project:
    name: Add to project
    runs-on: ubuntu-latest
    steps:
      - name: Add to project
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: https://github.com/users/vanman2024/projects/11
          github-token: ${{ secrets.GITHUB_TOKEN }}
          
  update-status:
    name: Update Status Field
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' || github.event_name == 'pull_request'
    needs: add-to-project
    
    steps:
      - name: Update status based on event
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Determine new status based on event
            let status = 'Todo';
            if (context.payload.action === 'closed') {
              status = 'Done';
            } else if (context.payload.action === 'reopened') {
              status = 'In Progress';
            }
            
            // Add label based on status
            if (context.payload.issue) {
              await github.rest.issues.addLabels({
                owner: owner,
                repo: repo,
                issue_number: context.payload.issue.number,
                labels: [`status:${status.toLowerCase()}`]
              }).catch(e => console.log('Label may not exist:', e.message));
            }
            
            console.log(`Status would be set to: ${status}`);
            
  auto-label:
    name: Auto Label Based on Content
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    
    steps:
      - name: Add labels based on issue content
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue || context.payload.pull_request;
            if (!issue) return;
            
            const title = issue.title.toLowerCase();
            const body = (issue.body || '').toLowerCase();
            const labels = [];
            
            // Priority detection
            if (title.includes('[p0]') || title.includes('[critical]') || body.includes('critical')) {
              labels.push('P0');
            } else if (title.includes('[p1]') || title.includes('[urgent]') || body.includes('urgent')) {
              labels.push('P1');
            } else if (title.includes('[p2]')) {
              labels.push('P2');
            } else {
              labels.push('P3');
            }
            
            // Component detection
            if (body.includes('component:') || body.includes('## component')) {
              if (body.includes('frontend')) labels.push('frontend');
              if (body.includes('backend')) labels.push('backend');
              if (body.includes('database')) labels.push('database');
              if (body.includes('devops')) labels.push('devops');
            }
            
            // Type detection
            if (title.includes('[bug]')) labels.push('bug');
            if (title.includes('[feature]')) labels.push('enhancement');
            if (title.includes('[docs]')) labels.push('documentation');
            if (title.includes('[test]')) labels.push('test');
            
            // Add all labels at once
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: labels
              }).catch(e => console.log('Some labels may not exist:', e.message));
              
              console.log(`Added labels: ${labels.join(', ')}`);
            }