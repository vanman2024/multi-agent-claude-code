name: '▶️ Gemini Invoke'

on:
  workflow_call:
    inputs:
      additional_context:
        type: 'string'
        description: 'Any additional context from the request'
        required: false

concurrency:
  group: '${{ github.workflow }}-invoke-${{ github.event_name }}-${{ github.event.pull_request.number || github.event.issue.number }}'
  cancel-in-progress: false

defaults:
  run:
    shell: 'bash'

jobs:
  invoke:
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      id-token: 'write'
      issues: 'write'
      pull-requests: 'write'
    steps:
      - name: 'Mint identity token'
        id: 'mint_identity_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b' # ratchet:actions/create-github-app-token@v2
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'
          permission-contents: 'read'
          permission-issues: 'write'
          permission-pull-requests: 'write'

      - name: 'Run Gemini CLI'
        id: 'run_gemini'
        uses: 'google-github-actions/run-gemini-cli@v0' # ratchet:exclude
        env:
          TITLE: '${{ github.event.pull_request.title || github.event.issue.title }}'
          DESCRIPTION: '${{ github.event.pull_request.body || github.event.issue.body }}'
          EVENT_NAME: '${{ github.event_name }}'
          GITHUB_TOKEN: '${{ steps.mint_identity_token.outputs.token || secrets.GITHUB_TOKEN || github.token }}'
          IS_PULL_REQUEST: '${{ !!github.event.pull_request }}'
          ISSUE_NUMBER: '${{ github.event.pull_request.number || github.event.issue.number }}'
          REPOSITORY: '${{ github.repository }}'
          ADDITIONAL_CONTEXT: '${{ inputs.additional_context }}'
        with:
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          gemini_cli_version: '${{ vars.GEMINI_CLI_VERSION || "latest" }}'
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          google_api_key: '${{ secrets.GOOGLE_API_KEY }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          gemini_debug: '${{ fromJSON(vars.DEBUG || vars.ACTIONS_STEP_DEBUG || false) }}'
          gemini_model: '${{ vars.GEMINI_MODEL || "gemini-1.5-pro" }}'
          settings: |-
            {
              "maxSessionTurns": 25,
              "telemetry": {
                "enabled": ${{ vars.GOOGLE_CLOUD_PROJECT != '' }},
                "target": "gcp"
              },
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": [
                    "run",
                    "-i",
                    "--rm",
                    "-e",
                    "GITHUB_PERSONAL_ACCESS_TOKEN",
                    "ghcr.io/github/github-mcp-server"
                  ],
                  "includeTools": [
                    "add_issue_comment",
                    "get_issue",
                    "get_issue_comments",
                    "list_issues",
                    "search_issues",
                    "create_pull_request",
                    "get_pull_request",
                    "get_pull_request_comments",
                    "get_pull_request_diff",
                    "get_pull_request_files",
                    "list_pull_requests",
                    "search_pull_requests",
                    "create_branch",
                    "create_or_update_file",
                    "delete_file",
                    "fork_repository",
                    "get_commit",
                    "get_file_contents",
                    "list_commits",
                    "push_files",
                    "search_code"
                  ],
                  "env": {
                    "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_TOKEN}"
                  }
                }
              },
              "coreTools": [
                "run_shell_command(echo)",
                "run_shell_command(cat /dev/null)",
                "run_shell_command(ls -la)",
                "run_shell_command(pwd)",
                "run_shell_command(grep -n)",
                "run_shell_command(find . -name)",
                "run_shell_command(head -n)",
                "run_shell_command(tail -n)",
                "run_shell_command(wc -l)",
                "run_shell_command(date)",
                "run_shell_command(whoami)",
                "run_shell_command(uname -a)",
                "read_file"
              ]
            }
          prompt: |-
            ## Identity & Context

            You are **Gemini**, an AI assistant integrated into GitHub via GitHub Actions. You are responding to a request in the repository `${REPOSITORY}`.

            **Request Context:**

            - **Event**: `${EVENT_NAME}`
            - **Issue/PR Number**: `${ISSUE_NUMBER}`
            - **Title**: `${TITLE}`
            - **Description**: `${DESCRIPTION}`
            - **Is Pull Request**: `${IS_PULL_REQUEST}`
            - **Additional Context**: `${ADDITIONAL_CONTEXT}`

            ## Security & Safety Guidelines

            **IMPORTANT**: You are running in a secure environment with restricted capabilities:

            1. **Shell Command Restrictions**: Only use approved shell commands with specific parameters
            2. **File Access**: Only read files, never write or modify system files
            3. **Network Access**: No network access or external API calls
            4. **Input Validation**: Sanitize all user inputs and avoid executing arbitrary commands
            5. **Sensitive Data**: Never expose credentials, tokens, or private information

            **Approved Shell Commands**:
            - `echo` - Display messages
            - `cat /dev/null` - Safe cat usage
            - `ls -la` - List directory contents
            - `pwd` - Show current directory
            - `grep -n` - Search with line numbers
            - `find . -name` - Find files by name
            - `head -n` / `tail -n` - View file contents
            - `wc -l` - Count lines
            - `date` - Show current time
            - `whoami` - Show current user
            - `uname -a` - System information

            ## Core Guidelines

            1. **Be Helpful**: Provide constructive, actionable responses to user requests.

            2. **Use Available Tools Safely**: You have access to GitHub MCP tools and restricted shell commands. Use them responsibly to gather information and analyze code.

            3. **Respond via GitHub**: Use the `mcp__github__add_issue_comment` tool to post your responses directly to the GitHub issue or pull request.

            4. **Be Concise**: Keep responses clear and focused. Use markdown formatting for better readability.

            5. **Validate Input**: Always sanitize and validate any user input before processing.

            ## Available Capabilities

            You can:
            - Analyze code and provide reviews
            - Help with issue triage and labeling
            - Answer questions about the codebase
            - Suggest improvements or solutions
            - Perform repository analysis (read-only)
            - Search and examine files safely

            ## Response Process

            1. **Validate Request**: Ensure the request is safe and appropriate
            2. **Analyze the Request**: Understand what the user is asking for
            3. **Gather Information Safely**: Use available tools to investigate as needed
            4. **Formulate Response**: Prepare a helpful, accurate response
            5. **Post Response**: Use `mcp__github__add_issue_comment` to reply

            Begin by analyzing the user's request and providing appropriate assistance while following all security guidelines.