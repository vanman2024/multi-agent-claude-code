name: Template Update Check

# Check for template updates weekly and when manually triggered
on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force apply updates (auto-resolve conflicts)'
        required: false
        default: 'false'
        type: boolean

jobs:
  check-template-updates:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check for template updates
        id: check-updates
        run: |
          # Check if template update system exists
          if [ ! -f "setup/template-update-system.js" ]; then
            echo "Template update system not found - this project may be outdated"
            echo "has_updates=unknown" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check for updates
          UPDATE_RESULT=$(node setup/template-update-system.js check 2>&1 || true)
          echo "Update check result:"
          echo "$UPDATE_RESULT"
          
          # Parse result to determine if updates are available
          if echo "$UPDATE_RESULT" | grep -q "Template updates available"; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            
            # Get version info
            CURRENT_VERSION=$(grep "Current:" <<< "$UPDATE_RESULT" | sed 's/.*Current: //')
            LATEST_VERSION=$(grep "Latest:" <<< "$UPDATE_RESULT" | sed 's/.*Latest: //')
            
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          elif echo "$UPDATE_RESULT" | grep -q "up to date"; then
            echo "has_updates=false" >> $GITHUB_OUTPUT
          else
            echo "has_updates=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Preview template updates
        id: preview-updates
        if: steps.check-updates.outputs.has_updates == 'true'
        run: |
          echo "Previewing template updates..."
          PREVIEW_RESULT=$(node setup/template-update-system.js preview 2>&1 || true)
          echo "Preview result:"
          echo "$UPDATE_RESULT"
          
          # Save preview to file for issue creation
          echo "$PREVIEW_RESULT" > template-update-preview.txt

      - name: Apply updates automatically (if force_update is true)
        id: apply-updates
        if: steps.check-updates.outputs.has_updates == 'true' && github.event.inputs.force_update == 'true'
        run: |
          echo "Applying template updates with auto-resolve..."
          node setup/template-update-system.js apply --force --sync
          
          # Check if there were any changes
          if [ -n "$(git status --porcelain)" ]; then
            echo "applied_updates=true" >> $GITHUB_OUTPUT
          else
            echo "applied_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit template updates
        if: steps.apply-updates.outputs.applied_updates == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add -A
          git commit -m "chore: auto-update from template

          Template version: ${{ steps.check-updates.outputs.current_version }} → ${{ steps.check-updates.outputs.latest_version }}
          
          🤖 Generated by template-update-check workflow
          
          Co-Authored-By: Template Update System <noreply@github.com>"
          
          git push

      - name: Create issue for manual updates
        if: steps.check-updates.outputs.has_updates == 'true' && github.event.inputs.force_update != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read preview if available
            let previewContent = '';
            try {
              previewContent = fs.readFileSync('template-update-preview.txt', 'utf8');
            } catch (error) {
              previewContent = 'Preview not available';
            }
            
            const currentVersion = '${{ steps.check-updates.outputs.current_version }}';
            const latestVersion = '${{ steps.check-updates.outputs.latest_version }}';
            
            const issueBody = `# Template Updates Available

            The multi-agent template repository has updates available for this project.

            ## Version Information
            - **Current Template Version**: \`${currentVersion}\`
            - **Latest Template Version**: \`${latestVersion}\`
            - **Check Date**: ${new Date().toISOString().split('T')[0]}

            ## Update Preview
            \`\`\`
            ${previewContent}
            \`\`\`

            ## How to Apply Updates

            ### Option 1: Review and Apply Manually
            \`\`\`bash
            # Preview what will be updated
            /update-from-template --preview

            # Apply updates (recommended)
            /update-from-template

            # Force apply with auto-conflict resolution (if needed)
            /update-from-template --force
            \`\`\`

            ### Option 2: Auto-Apply Next Time
            Re-run this workflow with "Force apply updates" enabled to automatically apply updates.

            ## What Gets Updated
            - ✅ **Safe Paths**: DevOps scripts, agent configurations, GitHub workflows
            - ⚠️ **Protected**: Your application code, environment files, dependencies
            - 🔒 **Never Touched**: src/, components/, .env*, package.json, README.md

            ## Important Notes
            - Template updates improve automation, agent coordination, and DevOps workflows
            - Your application code and customizations are never modified
            - A backup is automatically created before applying updates
            - Conflicts can be manually resolved or auto-resolved with \`--force\`

            ---
            🤖 Auto-generated by template-update-check workflow`;

            // Check if similar issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'template-update'
            });

            const hasExistingIssue = existingIssues.data.some(issue => 
              issue.title.includes('Template Updates Available')
            );

            if (!hasExistingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Template Updates Available (${currentVersion} → ${latestVersion})`,
                body: issueBody,
                labels: ['template-update', 'enhancement', 'automated']
              });
            } else {
              console.log('Template update issue already exists - not creating duplicate');
            }

      - name: Close old template update issues
        if: steps.check-updates.outputs.has_updates == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            // Close any open template-update issues since we're up to date
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'template-update'
            });

            for (const issue of existingIssues.data) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: '✅ Template is now up to date. Closing this issue.\n\n🤖 Auto-closed by template-update-check workflow'
              });
            }

      - name: Summary
        run: |
          echo "## Template Update Check Summary"
          echo "- Has updates: ${{ steps.check-updates.outputs.has_updates }}"
          echo "- Current version: ${{ steps.check-updates.outputs.current_version }}"
          echo "- Latest version: ${{ steps.check-updates.outputs.latest_version }}"
          echo "- Force update requested: ${{ github.event.inputs.force_update }}"
          echo "- Updates applied: ${{ steps.apply-updates.outputs.applied_updates }}"