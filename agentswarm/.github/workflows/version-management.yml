name: AgentSwarm Version Management

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  checks: read
  pull-requests: write

jobs:
  version-management:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install semantic-release dependencies
      run: |
        npm install --no-save \
          semantic-release \
          @semantic-release/changelog \
          @semantic-release/git \
          @semantic-release/github \
          @semantic-release/exec

    - name: Update VERSION file and create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create semantic-release config
        cat > .releaserc.json << 'EOF'
        {
          "branches": ["main"],
          "plugins": [
            "@semantic-release/commit-analyzer",
            "@semantic-release/release-notes-generator",
            [
              "@semantic-release/exec",
              {
                "prepareCmd": "node -e \"const fs = require('fs'); const versionData = { version: 'v${nextRelease.version}', commit: process.env.GITHUB_SHA, build_date: new Date().toISOString(), build_type: 'production' }; fs.writeFileSync('VERSION', JSON.stringify(versionData, null, 2));\""
              }
            ],
            [
              "@semantic-release/git",
              {
                "assets": ["VERSION"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }
            ],
            "@semantic-release/github"
          ]
        }
        EOF
        
        # Run semantic-release
        npx semantic-release
      continue-on-error: true

    - name: Deploy to template repository
      if: always()
      run: |
        echo "ðŸš€ Starting AgentSwarm auto-deploy to template..."
        
        # Clone template repository
        git clone https://github.com/vanman2024/multi-agent-claude-code.git template-repo
        cd template-repo
        
        # Configure git
        git config user.name "AgentSwarm Auto-Deploy"
        git config user.email "action@github.com"
        
        # Run intelligent auto-deploy script
        chmod +x ../scripts/intelligent-auto-deploy.sh
        ../scripts/intelligent-auto-deploy.sh . ../ 
        
        # Create and push auto-deploy PR
        BRANCH_NAME="auto-deploy/agentswarm-$(date +%Y%m%d-%H%M%S)"
        git checkout -b "$BRANCH_NAME"
        
        if git diff --quiet; then
          echo "âœ… No changes to deploy"
        else
          git add -A
          git commit -m "feat: Auto-deploy AgentSwarm components $(cat ../VERSION | jq -r .version)"
          git push origin "$BRANCH_NAME"
          
          # Create PR using gh CLI
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh pr create \
            --title "ðŸ¤– Auto-deploy AgentSwarm $(cat ../VERSION | jq -r .version)" \
            --body "Automated deployment of AgentSwarm components

        ## Changes
        - AgentSwarm version: $(cat ../VERSION | jq -r .version)
        - Build date: $(cat ../VERSION | jq -r .build_date)
        - Auto-generated by AgentSwarm version management workflow

        ## Testing
        - [x] Automated sync completed
        - [x] Version files updated
        - [ ] Manual review required before merge

        /auto-merge" \
            --assignee "vanman2024"
            
          echo "âœ… AgentSwarm auto-deploy PR created successfully"
        fi

    - name: AgentSwarm deployment complete
      if: always()
      run: |
        echo "âœ… AgentSwarm version management workflow completed"
        echo "ðŸ“¦ AgentSwarm version: $(cat VERSION | jq -r .version 2>/dev/null || echo 'unknown')"
        echo "ðŸš€ AgentSwarm deployment to template initiated"