name: Status Reporter

on:
  push:
    branches-ignore:
      - main
      - master
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  statuses: write
  issues: read
  pull-requests: read

jobs:
  report-status:
    name: Report Required Statuses
    runs-on: ubuntu-latest
    steps:
      - name: Create Issue Checkboxes Status
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.payload.pull_request?.head?.sha || context.sha;
            
            // Find PR
            let prBody = '';
            if (context.payload.pull_request) {
              prBody = context.payload.pull_request.body || '';
            } else {
              // Try to find PR for this branch
              const branch = context.ref.replace('refs/heads/', '');
              try {
                const { data: prs } = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: `${context.repo.owner}:${branch}`,
                  state: 'open'
                });
                if (prs.length > 0) {
                  prBody = prs[0].body || '';
                }
              } catch (e) {
                console.log('No PR found');
              }
            }
            
            // Find linked issue
            const issueMatch = prBody.match(/(?:Closes|Fixes|Resolves)\s+#(\d+)/i);
            let state = 'success';
            let description = 'No linked issue';
            
            if (issueMatch) {
              const issueNumber = parseInt(issueMatch[1]);
              try {
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });
                
                const unchecked = (issue.body?.match(/- \[ \]/g) || []).length;
                const checked = (issue.body?.match(/- \[x\]/gi) || []).length;
                const total = unchecked + checked;
                
                if (unchecked > 0) {
                  state = 'failure';
                  description = `${unchecked} unchecked boxes in issue #${issueNumber}`;
                } else if (total > 0) {
                  state = 'success';
                  description = `All ${total} requirements complete`;
                } else {
                  state = 'success';
                  description = 'No checkboxes in issue';
                }
              } catch (e) {
                console.log('Error getting issue:', e);
              }
            }
            
            // Create Issue Checkboxes status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: sha,
              state: state,
              context: 'Issue Checkboxes',
              description: description,
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/issues/${issueMatch?.[1] || ''}`
            });
            
            // Create Deploy Preview status
            const deployState = state === 'success' ? 'pending' : 'failure';
            const deployDesc = state === 'success' ? 'Ready to deploy' : `Blocked: ${description}`;
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: sha,
              state: deployState,
              context: 'Deploy Preview to Vercel',
              description: deployDesc
            });
            
            console.log(`Created statuses: Issue Checkboxes (${state}), Deploy Preview (${deployState})`);